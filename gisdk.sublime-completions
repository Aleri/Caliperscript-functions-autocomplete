{
   "scope": "source.gisdk",

        "completions":
        [
        	{ "trigger": "Abs", "contents": "rslt = Abs(real value)"},
			{ "trigger": "Acos", "contents": "rslt = Acos(real value)"},
			{ "trigger": "Acosh", "contents": "rslt = Acosh(real value)"},
			{ "trigger": "AddAnnotation", "contents": "id = AddAnnotation(string window_spec, string type, array  spec)"},
			{ "trigger": "AddArea", "contents": "new_id = AddArea(int ID, array poly, array options)"},
			{ "trigger": "AddCDFLayer", "contents": "actual_lyr_name = AddCDFLayer(string map_name, string layer_name,  string db_name, string db_layer_name)"},
			{ "trigger": "AddExistingLayer", "contents": "actual_lyr_name = AddExistingLayer(string map_name, string  layer_name)"},
			{ "trigger": "AddIDField", "contents": "AddIDField(string view_name, integer start, integer step,  boolean indexed_flag, string newfldname, string where, array options)"},
			{ "trigger": "AddImageLayer", "contents": "actual_lyr_name = AddImageLayer(string map_name, string  layer_name, string file_name)"},
			{ "trigger": "AddLayer", "contents": "actual_lyr_name = AddLayer(string map_name, string layer_name,  string db_name, string db_layer_name [, array options])"},
			{ "trigger": "AddLayerToWorkspace", "contents": "actual_name = AddLayerToWorkspace(string layer_name, string  db_name, string db_layer_name [, array options])"},
			{ "trigger": "AddLegendItem", "contents": "result = AddLegendItem(string map_name, array item_info)"},
			{ "trigger": "AddLink", "contents": "new_id = AddLink(array line_coordinates, integer ID, array  options)"},
			{ "trigger": "AddLRSLayer", "contents": "actual_lyr_name = AddLRSLayer(string map_name, string layer_name,  array lrs_info, string rs_layer)"},
			{ "trigger": "AddMatrixCore", "contents": "AddMatrixCore(matrix m, string new_core_name)"},
			{ "trigger": "AddMenuItem", "contents": "AddMenuItem(string new_item, string relative, string old_item)"},
			{ "trigger": "AddMITABLayer", "contents": "AddMITABLayer(string map_name, string layer_name, string  file_name, array options)"},
			{ "trigger": "AddMITABLayerToWorkspace", "contents": "AddMITABLayerToWorkspace(string layer_name, string file_name,  array options)"},
			{ "trigger": "AddNode", "contents": "new_id = AddNode(coordinate coordinate, integer ID)"},
			{ "trigger": "AddODBCLayer", "contents": "AddODBCLayer(string map_name, string layer_name, string  service_name, string db_layer_name, string schema_name, array options)"},
			{ "trigger": "AddODBCLayerToWorkspace", "contents": "AddODBCLayerToWorkspace(string layer_name, string service_name,  string db_layer_name, string schema_name, array options)"},
			{ "trigger": "AddPoint", "contents": "new_id = AddPoint(coord coordinate, integer ID)"},
			{ "trigger": "AddRecord", "contents": "record_handle = AddRecord(string view_name, array values)"},
			{ "trigger": "AddRecords", "contents": "record_handle = AddRecords(string view_name, array field_names,  array values, array options)"},
			{ "trigger": "AddRoute", "contents": "AddRoute(string rs_layer, string name, string side, array  links, array stops, array rte_attr)"},
			{ "trigger": "AddRouteStops", "contents": "AddRouteStops(string rs_layer, string name, array stops)"},
			{ "trigger": "AddRouteSystemLayer", "contents": "layers_added = AddRouteSystemLayer(string map_name, string  layer_name, string rs_path, array options)"},
			{ "trigger": "AddRSPhysicalStops", "contents": "ids = AddRSPhysicalStops(string rs_layer, array physical_stops)"},
			{ "trigger": "AddSDOLayer", "contents": "AddSDOLayer(string map_name, string layer_name, string  service_name, string db_layer_name, string schema_name, array options)"},
			{ "trigger": "AddSDOLayerToWorkspace", "contents": "AddSDOLayerToWorkspace(string layer_name, string service_name,  string db_layer_name, string schema_name, array options)"},
			{ "trigger": "AddShapeLayer", "contents": "AddShapeLayer(string map_name, string layer_name, string  file_name, array options)"},
			{ "trigger": "AddShapeLayerToWorkspace", "contents": "AddShapeLayerToWorkspace(string layer_name, string file_name,  array options)"},
			{ "trigger": "AddShortestPathRoutes", "contents": "AddShortestPathRoutes(network net, string route_layer,  string origin_set, string dest_set, string via_set, integer var_index,  array options)"},
			{ "trigger": "AggregateMatrix", "contents": "new_matrix = AggregateMatrix(matcurrency currency, array  row_names, array column_names, array options)"},
			{ "trigger": "AggregateTable", "contents": "rslt = AggregateTable(string new_view, string input_view,  string output_type, string output_filename, string aggregation_field_name,  array output_fields, array options)"},
			{ "trigger": "AppendRowToReportFile", "contents": "AppendRowToReportFile(array values, array options)"},
			{ "trigger": "AppendTableToReportFile", "contents": "AppendTableToReportFile(array columns, array options)"},
			{ "trigger": "AppendToLogFile", "contents": "AppendToLogFile(int IndentLevel, string text)"},
			{ "trigger": "AppendToLogFileWithLimit", "contents": "AppendToLogFileWithLimit(int IndentLevel, string text)"},
			{ "trigger": "AppendToReportFile", "contents": "AppendToReportFile(int IndentLevel, string text [, array  options])"},
			{ "trigger": "ApplyOverlayTable", "contents": "rslt = ApplyOverlayTable(string new_view, string overlay_table_filename,  string input_view, string output_type, string output_filename, array output_fields,  array options)"},
			{ "trigger": "AreMatricesCompatible", "contents": "Result = AreMatricesCompatible(matcurrency mc1, matcurrency  mc2, array options)"},
			{ "trigger": "ArrangeIcons", "contents": "ArrangeIcons()"},
			{ "trigger": "ArrayElementToInteger", "contents": "int_value = ArrayElementToInteger(array arr, int pos)"},
			{ "trigger": "ArrayElementToReal", "contents": "int_value = ArrayElementToReal(array arr, int pos)"},
			{ "trigger": "ArrayElementToString", "contents": "int_value = ArrayElementToString(array arr, int pos)"},
			{ "trigger": "ArrayLength", "contents": "len = ArrayLength(array input_array)"},
			{ "trigger": "ArrayMax", "contents": "max = ArrayMax(array my_array)"},
			{ "trigger": "ArrayMin", "contents": "min = ArrayMin(array my_array)"},
			{ "trigger": "ArrayPosition", "contents": "position = ArrayPosition(array my_array, array sub_array,  array options)"},
			{ "trigger": "ArrayToVector", "contents": "vec = ArrayToVector(array arr [, array options])"},
			{ "trigger": "As", "contents": "opts = As(string type, array default_value [, string description  [, string parent_param_name [, string display_spec]]])"},
			{ "trigger": "Ascii", "contents": "c = Ascii(string c)"},
			{ "trigger": "Asin", "contents": "rslt = Asin(real value)"},
			{ "trigger": "Asinh", "contents": "rslt = Asinh(real value)"},
			{ "trigger": "Atan", "contents": "rslt = Atan(real value)"},
			{ "trigger": "Atan2", "contents": "value = Atan2(real y_num, real x_num)"},
			{ "trigger": "Atanh", "contents": "value = Atanh(real value)"},
			{ "trigger": "AttachTableTranslation", "contents": "AttachTableTranslation(string base_table, string code_view_set,  string fldname_fld, string code_fld, string val_fld, array options)"},
			{ "trigger": "Avg", "contents": "value = avg(array my_array)"},
			{ "trigger": "Azimuth", "contents": "azim = Azimuth(coord c1, coord c2)"},
			{ "trigger": "BitwiseAnd", "contents": "int = BitwiseAnd(integer int1, integer int2)"},
			{ "trigger": "BitwiseNot", "contents": "int = BitwiseNot(integer int1)"},
			{ "trigger": "BitwiseOr", "contents": "int = BitwiseOr(integer int1, integer int2)"},
			{ "trigger": "BitwiseXor", "contents": "int = BitwiseXor(integer int1, integer int2)"},
			{ "trigger": "BringAnnotationToFront", "contents": "id = BringAnnotationToFront(string window_spec, integer  id)"},
			{ "trigger": "BuildInternalIndex", "contents": "BuildInternalIndex(string field_spec)"},
			{ "trigger": "CallDllFunction", "contents": "ret_val = CallDllFunction(string dll_name, string func_name,  string ret_type, array args)"},
			{ "trigger": "CascadeWindows", "contents": "CascadeWindows()"},
			{ "trigger": "Ceil", "contents": "value = Ceil(real value1)"},
			{ "trigger": "CenterLayout", "contents": "CenterLayout(string layout_name, coord center)"},
			{ "trigger": "CenterMap", "contents": "CenterMap(string map_name, coord center)"},
			{ "trigger": "ChangeLinkStatus", "contents": "ChangeLinkStatus(network net_handle, string view_set, array  options)"},
			{ "trigger": "ChangeNetworkSettings", "contents": "ChangeNetworkSettings(network net, array options)"},
			{ "trigger": "Char", "contents": "c = Char(integer i)"},
			{ "trigger": "CheckStopwatch", "contents": "elapsed_time = CheckStopwatch(string stopwatch_name)"},
			{ "trigger": "ChooseColor", "contents": "color_value = ChooseColor(color initial_color, string help_keyword)"},
			{ "trigger": "ChooseDirectory", "contents": "dnm = ChooseDirectory(string prompt, array options)"},
			{ "trigger": "ChooseFile", "contents": "fnm = ChooseFile(array file_types, string title, array  options)"},
			{ "trigger": "ChooseFileName", "contents": "fnm = ChooseFileName(array file_types, string title, array  options)"},
			{ "trigger": "ChooseFont", "contents": "fnt = ChooseFont(string initial_font, boolean scaleable,  string help_keyword)"},
			{ "trigger": "Circle", "contents": "value = circle(coord center1, real radius1)"},
			{ "trigger": "CleanMilepostView", "contents": "CleanMilepostView(string file_name, string file_type, string  view_name, string rt_fld,"},
			{ "trigger": "ClearDXFInfo", "contents": "ClearDXFInfo()"},
			{ "trigger": "ClearThemeValues", "contents": "ClearThemeValues()"},
			{ "trigger": "ClickCircle", "contents": "circle = ClickCircle()"},
			{ "trigger": "ClickCoord", "contents": "user_coord = ClickCoord()"},
			{ "trigger": "ClickCurve", "contents": "curve = ClickCurve()"},
			{ "trigger": "ClickDragAndShow", "contents": "ClickDragAndShow()"},
			{ "trigger": "ClickEllipse", "contents": "corners_array = ClickEllipse()"},
			{ "trigger": "ClickEllipseScope", "contents": "scope = ClickEllipseScope()"},
			{ "trigger": "ClickLayout", "contents": "double_click = ClickLayout()"},
			{ "trigger": "ClickLine", "contents": "coord_array = ClickLine()"},
			{ "trigger": "ClickPolyline", "contents": "coord_array = ClickPolyline()"},
			{ "trigger": "ClickRect", "contents": "corners_array = ClickRect(string ignored, real aspect_ratio)"},
			{ "trigger": "ClickRectScope", "contents": "scope = ClickRectScope()"},
			{ "trigger": "ClickScope", "contents": "scope = ClickScope()"},
			{ "trigger": "ClickShape", "contents": "coord_array = ClickShape()"},
			{ "trigger": "ClickText", "contents": "text_added = ClickText(array location, color clr, string  font, string initial_text, boolean multiline)"},
			{ "trigger": "CloseCOMControl", "contents": "CloseCOMControl(string name)"},
			{ "trigger": "CloseDbox", "contents": "CloseDbox(string tbox_name)"},
			{ "trigger": "CloseEditor", "contents": "CloseEditor(string editor_name)"},
			{ "trigger": "CloseFigure", "contents": "CloseFigure(string figure_name)"},
			{ "trigger": "CloseFile", "contents": "CloseFile(file f)"},
			{ "trigger": "CloseLayout", "contents": "CloseLayout(string layout_name)"},
			{ "trigger": "CloseMap", "contents": "CloseMap(string map_name)"},
			{ "trigger": "CloseReportFileSection", "contents": "CloseReportFileSection()"},
			{ "trigger": "CloseView", "contents": "CloseView(string view_name)"},
			{ "trigger": "ColorCIE", "contents": "c = ColorCIE(real x, real y, real cap_y)"},
			{ "trigger": "ColorHLS", "contents": "c = ColorHLS(real hue, real lightness, real saturation)"},
			{ "trigger": "ColorHSV", "contents": "c = ColorHSV(real hue, real saturation, real value)"},
			{ "trigger": "ColorRGB", "contents": "c = ColorRGB(integer red, integer green, integer blue)"},
			{ "trigger": "ColumnAggregate", "contents": "ColumnAggregate(string layer_set, real buffer, string source_layer_set,  array fields, array options)"},
			{ "trigger": "CombineMatrices", "contents": "new_matrix = CombineMatrices (array matcurrencies, array  options)"},
			{ "trigger": "ComputeIntersectionPercentages", "contents": "ComputeIntersectionPercentages(array layer_sets, string  table, array options)"},
			{ "trigger": "ComputeStatistics", "contents": "new_view_name = ComputeStatistics(string view_set_name,  string new_view_name, string output_filename, string output_type, array  options)"},
			{ "trigger": "ConcatenateFiles", "contents": "ConcatenateFiles(array orig_files, string dest_file)"},
			{ "trigger": "ConcatMatrices", "contents": "new_matrix = ConcatMatrices(array matrices, string new,  array options)"},
			{ "trigger": "ConstructSnapshot", "contents": "ConstructSnapshot(string map_name, string snapshot_name,  scope image_scope, string path)"},
			{ "trigger": "ConvertAutomaticToManualLabels", "contents": "ConvertAutomaticToManualLabels(string map_name)"},
			{ "trigger": "ConvertToAreaDatabase", "contents": "ConvertToAreaDatabase(string layer_set, string new_db_name,  array options)"},
			{ "trigger": "ConvertToLineDatabase", "contents": "ConvertToLineDatabase(string layer_set, string new_db_name,  array options)"},
			{ "trigger": "ConvexHull", "contents": "hull = ConvexHull(integer area_id)"},
			{ "trigger": "ConvoluteMatrices", "contents": "new_matrix = ConvoluteMatrices(matcurrency left, matcurrency  right, array"},
			{ "trigger": "Coord", "contents": "coord_value = Coord(integer lon, integer lat)"},
			{ "trigger": "CoordInArea", "contents": "answer = CoordInArea(coordinate c, array area)"},
			{ "trigger": "CoordInScope", "contents": "result = CoordInScope(coord c, scope scp)"},
			{ "trigger": "CoordToLineDistance", "contents": "dist = CoordToLineDistance(coord c, real search_threshold)"},
			{ "trigger": "CopyArray", "contents": "new_arr = CopyArray(array arr)"},
			{ "trigger": "CopyDatabase", "contents": "CopyDatabase(string name, string new_name)"},
			{ "trigger": "CopyFigureToClipboard", "contents": "CopyFigureToClipboard(string figure_name)"},
			{ "trigger": "CopyFile", "contents": "CopyFile(string src_path, string dest_path)"},
			{ "trigger": "CopyLayerSettings", "contents": "CopyLayerSettings(string from_map, string to_map, string  layer_name)"},
			{ "trigger": "CopyLayoutToClipboard", "contents": "CopyLayoutToClipboard(string layout_name)"},
			{ "trigger": "CopyMapToClipboard", "contents": "CopyMapToClipboard(string map_name, scope scp)"},
			{ "trigger": "CopyMapToOLE", "contents": "CopyMapToOLE(string map_name)"},
			{ "trigger": "CopyMatrix", "contents": "new_matrix = CopyMatrix(matcurrency currency, array options)"},
			{ "trigger": "CopyMatrixStructure", "contents": "new_matrix = CopyMatrixStructure(array matcurrencies, array  options)"},
			{ "trigger": "CopyPoint", "contents": "new_id = CopyPoint(integer original_id, integer new_id)"},
			{ "trigger": "CopyTableFiles", "contents": "CopyTableFiles(string view_name, string class, string primary,  string secondary, string new_primary, string new_secondary)"},
			{ "trigger": "CopyVector", "contents": "new_vec = CopyVector(vector vec)"},
			{ "trigger": "Cos", "contents": "value = Cos(real angle_value)"},
			{ "trigger": "Cosh", "contents": "value = Cosh(real angle_value)"},
			{ "trigger": "CreateBuffers", "contents": "CreateBuffers(string db_name, string output_layer_name,  array sets, string method, array inputs, array options)"},
			{ "trigger": "CreateChartTheme", "contents": "theme_name = CreateChartTheme(string identifier, array  field_specs, string type, array options)"},
			{ "trigger": "CreateCOMControl", "contents": "string = CreateCOMControl(string name,string progid, array  options)"},
			{ "trigger": "CreateCOMObject", "contents": "comobject = CreateCOMObject(string progid, array options)"},
			{ "trigger": "CreateContinuousTheme", "contents": "theme_name = CreateContinuousTheme(string identifier, array  field_specs, array options)"},
			{ "trigger": "CreateContourDB", "contents": "CreateContourDB(tin t, string db_name, array options)"},
			{ "trigger": "CreateConvexHullDB", "contents": "CreateConvexHullDB(tin t, string db_name, array options)"},
			{ "trigger": "CreateDatabase", "contents": "CreateDatabase(string geofile_name, string layer_type,  array options)"},
			{ "trigger": "CreateDesirelineDB", "contents": "CreateDesirelineDB(string db_name, array currencies, string  row_lyr_set, string col_lyr_set, string field, array options)"},
			{ "trigger": "CreateDirectory", "contents": "CreateDirectory(string dir_name)"},
			{ "trigger": "CreateDotTheme", "contents": "theme_name = CreateDotTheme(string identifier, array field_specs,  real dot_value, array options)"},
			{ "trigger": "CreateEditor", "contents": "actual_name = CreateEditor(string editor_name, string view_set_name,  array columns, array options)"},
			{ "trigger": "CreateEditorByQuery", "contents": "actual_name = CreateEditorByQuery(string editor_name, string  sql_query, array options)."},
			{ "trigger": "CreateExpression", "contents": "expr = CreateExpression(string view_name, string expr_name,  string expression, array options)"},
			{ "trigger": "CreateFigure", "contents": "window_name = CreateFigure(string figure_name, string type,  array options)"},
			{ "trigger": "CreateGeographyArchive", "contents": "CreateGeographyArchive(string archive_name, string db_name)"},
			{ "trigger": "CreateGrid", "contents": "max_weight = CreateGrid(real x_origin, real y_origin, integer  num_rows,integer num_cols, real x_step, real y_step, string new_db_name,  string layer_type, array options)"},
			{ "trigger": "CreateGroup", "contents": "sets = CreateGroup(string field_spec, string method, int  num_classes, array options)"},
			{ "trigger": "CreateGroupByTheme", "contents": "CreateGroupByTheme(string theme_name)"},
			{ "trigger": "CreateLayout", "contents": "CreateLayout(string layout_name, array options)"},
			{ "trigger": "CreateLegend", "contents": "CreateLegend (string map_name, array settings, array options)"},
			{ "trigger": "CreateMap", "contents": "actual_name = CreateMap(string map_name, array options)"},
			{ "trigger": "CreateMatrix", "contents": "new_matrix = CreateMatrix(array row_spec, array column_spec,  array options)"},
			{ "trigger": "CreateMatrixCurrencies", "contents": "mc_array = CreateMatrixCurrencies(matrix m, string rowindex,  string colindex, array options)"},
			{ "trigger": "CreateMatrixCurrency", "contents": "matrix_currency = CreateMatrixCurrency(matrix m, string  core, string rowindex, string colindex, array options)"},
			{ "trigger": "CreateMatrixEditor", "contents": "actual_name = CreateMatrixEditor(string editor_name, matrix  m, array options)"},
			{ "trigger": "CreateMatrixFromView", "contents": "new_matrix = CreateMatrixFromView(string matrix_name, string  view_set, string row_id_field, string column_id_field, array data_columns,  array options)"},
			{ "trigger": "CreateMatrixIndex", "contents": "index_name = CreateMatrixIndex(string index_name, matrix  m, string index_type, string view_set, string old_id_name, string new_id_name  [, array options])"},
			{ "trigger": "CreateMilepostTable", "contents": "CreateMilepostTable(string file_name, string file_type,  string layer_name, string route_layer, array options)"},
			{ "trigger": "CreateNetwork", "contents": "net_handle = CreateNetwork (string set_name, string file_name,  string label, array link_field_names, array node_field_names, array options)"},
			{ "trigger": "CreateNodeField", "contents": "new_field = CreateNodeField(string line_layer, string field_name,  string node_field_spec, string which_node, array options)"},
			{ "trigger": "CreateObject", "contents": "object_variable = CreateObject(string class_name [, arg1  [, arg2 [,... [, arg8]]]])"},
			{ "trigger": "CreateProgressBar", "contents": "CreateProgressBar(string activity, boolean cancel_button)"},
			{ "trigger": "CreateRouteSystem", "contents": "info = CreateRouteSystem(string rs_path, string geo_path,  string geo_layer_name, array options)"},
			{ "trigger": "CreateRouteSystemFromTables", "contents": "info = CreateRouteSystemFromTables(string links_table_file,  string line_geo_file,"},
			{ "trigger": "CreateSet", "contents": "new_set_name = CreateSet(string new_set_name)"},
			{ "trigger": "CreateSimpleMatrix", "contents": "new_matrix = CreateSimpleMatrix(string mat_name, int nrows,  int ncols, array options)"},
			{ "trigger": "CreateSnapshot", "contents": "snapshot_name = CreateSnapshot(string map_name, string  proposed_name)"},
			{ "trigger": "CreateStopSkipButtons", "contents": "CreateStopSkipButtons(array stop_button_names, array skip_button_names)"},
			{ "trigger": "CreateStopwatch", "contents": "CreateStopwatch(string stopwatch_name)"},
			{ "trigger": "CreateStreetCDF", "contents": "CreateStreetCDF(string lyr_set_name, string db_name, array  options)"},
			{ "trigger": "CreateTable", "contents": "new_view_name = CreateTable(string table_name, string filename,  string class, array field_info_array)"},
			{ "trigger": "CreateTableFromMatrix", "contents": "CreateTableFromMatrix(matrix m, string file_name, string  class, array options)"},
			{ "trigger": "CreateTableFromTransitNetworkVars", "contents": "actual_name = CreateTableFromTransitNetworkVars(net net_hdl,  array options)"},
			{ "trigger": "CreateTheme", "contents": "theme_name = CreateTheme(string identifier, string field_spec,  string method, integer num_classes, array options)"},
			{ "trigger": "CreateTimer", "contents": "CreateTimer(string timer_name, integer interval, string  macro_name)"},
			{ "trigger": "CreateTransitNetwork", "contents": "tnet_handle = CreateTransitNetwork(string route_set, string  stop_layer, string street_layer_set, string file_name, string label, array  options)"},
			{ "trigger": "CreateTriangulation", "contents": "tin = CreateTriangulation(string layer_set_name, array  options)"},
			{ "trigger": "CreateTriangulationAreaDB", "contents": "CreateTriangulationAreaDB(tin t, string db_name, array  options)"},
			{ "trigger": "CreateVisibilityMap", "contents": "CreateVisibilityMap(tin t, string db_name, coord point,  double height, array options)"},
			{ "trigger": "CreateVoronoiDB", "contents": "CreateVoronoiDB(tin t, string db_name, array options)"},
			{ "trigger": "DayOfWeek", "contents": "day = DayOfWeek(string date)"},
			{ "trigger": "DecideJoinType", "contents": "type = DecideJoinType(string join_fld, array options)"},
			{ "trigger": "DeleteArea", "contents": "old_id = DeleteArea(int ID)"},
			{ "trigger": "DeleteDatabase", "contents": "DeleteDatabase(string pathname)"},
			{ "trigger": "DeleteFile", "contents": "DeleteFile(string path)"},
			{ "trigger": "DeleteLink", "contents": "deleted_id = DeleteLink(integer ID, array options)"},
			{ "trigger": "DeleteMatrixIndex", "contents": "DeleteMatrixIndex(matrix m, string index_name)"},
			{ "trigger": "DeleteNetworkInformationItem", "contents": "DeleteNetworkInformationItem(network net, string label)"},
			{ "trigger": "DeleteNode", "contents": "deleted_id = DeleteNode(integer ID, array options)"},
			{ "trigger": "DeletePoint", "contents": "deleted_id = DeletePoint(integer ID)"},
			{ "trigger": "DeleteRecord", "contents": "DeleteRecord(string view_name, string rec_handle)"},
			{ "trigger": "DeleteRecordsInSet", "contents": "DeleteRecordsInSet(string set_name)"},
			{ "trigger": "DeleteRoute", "contents": "DeleteRoute(string rs_layer, string name)"},
			{ "trigger": "DeleteRoutes", "contents": "DeleteRoutes(string rs_layer, array names)"},
			{ "trigger": "DeleteRouteStops", "contents": "DeleteRouteStops(string rs_layer, string name)"},
			{ "trigger": "DeleteRouteSystem", "contents": "DeleteRouteSystem(string rs_path)"},
			{ "trigger": "DeleteSet", "contents": "DeleteSet(string set_name)"},
			{ "trigger": "DeleteSnapshot", "contents": "DeleteSnapshot(string map_name, string snapshot_name)"},
			{ "trigger": "DeleteTableFiles", "contents": "DeleteTableFiles(string class, string primary, string secondary)"},
			{ "trigger": "DestroyExpression", "contents": "DestroyExpression(string field_spec)"},
			{ "trigger": "DestroyLegend", "contents": "DestroyLegend(string map_name)"},
			{ "trigger": "DestroyProgressBar", "contents": "DestroyProgressBar()"},
			{ "trigger": "DestroyStopwatch", "contents": "DestroyStopwatch(string stopwatch_name)"},
			{ "trigger": "DestroyTheme", "contents": "DestroyTheme(string theme_name)"},
			{ "trigger": "DestroyTimer", "contents": "DestroyTimer(string timer_name)"},
			{ "trigger": "DetachTableTranslation", "contents": "DetachTableTranslation(string reftable)"},
			{ "trigger": "DisableItem", "contents": "DisableItem(string item_name)"},
			{ "trigger": "DisableMenuItems", "contents": "DisableMenuItems(array item_list)"},
			{ "trigger": "DisableProgressBar", "contents": "DisableProgressBar()"},
			{ "trigger": "DivideMatrixElements", "contents": "DivideMatrixElements(matcurrency currency, string first_core,  string second_core, array row_ids, array column_ids, array options)"},
			{ "trigger": "DragMapToOLE", "contents": "DragMapToOLE(string map_name)"},
			{ "trigger": "DrawLayout", "contents": "DrawLayout(string layout_name)"},
			{ "trigger": "DrawMapAnnotations", "contents": "DrawMapAnnotations(string window_spec)"},
			{ "trigger": "DropAnnotation", "contents": "DropAnnotation(string window_spec, integer id)"},
			{ "trigger": "DropAnnotations", "contents": "DropAnnotations(string window_spec, array ids)"},
			{ "trigger": "DropLayer", "contents": "DropLayer(string map_name, string layer_name)"},
			{ "trigger": "DropLayerFromWorkspace", "contents": "DropLayerFromWorkspace(string layer_name)"},
			{ "trigger": "DropLegendItem", "contents": "result = DropLegendItem(string map_name, array item_info)"},
			{ "trigger": "DropMatrixCore", "contents": "DropMatrixCore(matrix m, string core_name)"},
			{ "trigger": "DropSelectedAnnotations", "contents": "DropSelectedAnnotations(string window_spec)"},
			{ "trigger": "DShortestPath", "contents": "dpath = DShortestPath(network net, integer from_ID, integer  to_ID, int var_index, array options)"},
			{ "trigger": "DuplicateAnnotation", "contents": "id = DuplicateAnnotation(string window_spec, integer id)"},
			{ "trigger": "EditorPrintSetup", "contents": "result = EditorPrintSetup(integer across_first, string  title, array options)"},
			{ "trigger": "EnableItem", "contents": "EnableItem(string item_name)"},
			{ "trigger": "EnableMenuItems", "contents": "EnableMenuItems(array item_list)"},
			{ "trigger": "EnableProgressBar", "contents": "EnableProgressBar(string title, integer max_bars)"},
			{ "trigger": "EstimateElevation", "contents": "spot_height = EstimateElevation(tin t, coord point)"},
			{ "trigger": "EvaluateMatrixExpression", "contents": "EvaluateMatrixExpression(matcurrency currency, string expression,  array row_ids, array column_ids, array options)"},
			{ "trigger": "ExcludeArrayElements", "contents": "new_array = ExcludeArrayElements(array my_array, integer  start, integer count)"},
			{ "trigger": "Exp", "contents": "value = Exp(real value1)"},
			{ "trigger": "ExpandGeographyArchive", "contents": "ExpandGeographyArchive(string archive_name, string db_path)"},
			{ "trigger": "ExportArcViewShape", "contents": "ExportArcViewShape(string lyr_set_name, string file_name,  array options)"},
			{ "trigger": "ExportCSV", "contents": "ExportCSV(string lyr_set_name, string file_name, array  options)"},
			{ "trigger": "ExportDXF", "contents": "ExportDXF(string lyr_set_name, string file_name, array  options)"},
			{ "trigger": "ExportEditor", "contents": "ExportEditor(string editor_name, string class, string file_name,  array options)"},
			{ "trigger": "ExportExcel", "contents": "ExportExcel(string excel_file, string class, string new_file,  array options)"},
			{ "trigger": "ExportGeography", "contents": "ExportGeography(string lyr_set_name, string db_name, array  options)"},
			{ "trigger": "ExportMatrix", "contents": "ExportMatrix(matcurrency currency, array items, string  dimension, string class, string file_name, array options)"},
			{ "trigger": "ExportTableTranslation", "contents": "ExportTableTranslation(string reftable, string output_class,  string output_filename, array options)"},
			{ "trigger": "ExportView", "contents": "ExportView(string view_set_name, string class, string file_name,  array field_names, array options)"},
			{ "trigger": "ExtractArray", "contents": "ExtractArray(array arr, int idx)"},
			{ "trigger": "Factorial", "contents": "value = Factorial(integer int1)"},
			{ "trigger": "FieldsSupportAggregations", "contents": "aggr = FieldsSupportAggregations(string view, array fields,  array options)"},
			{ "trigger": "FieldsSupportDescriptions", "contents": "desc = FieldsSupportDescriptions(string view, array fields,  array options)"},
			{ "trigger": "FileAtEOF", "contents": "result = FileAtEOF(file f)"},
			{ "trigger": "FileCheckUsage", "contents": "result = FileCheckUsage(array file_names, string type)"},
			{ "trigger": "FileGetPosition", "contents": "result = FileGetPosition(file f)"},
			{ "trigger": "FileReadDouble", "contents": "result = FileReadDouble(file f [, array options])"},
			{ "trigger": "FileReadFloat", "contents": "result = FileReadFloat(file f [, array options])"},
			{ "trigger": "FileReadLongInt", "contents": "result = FileReadLongInt(file f [, array options])"},
			{ "trigger": "FileReadShortInt", "contents": "result = FileReadShortInt(file f [, array options])"},
			{ "trigger": "FileReadString", "contents": "result = FileReadString(file f, integer length [, array  options])"},
			{ "trigger": "FileSetPosition", "contents": "FileSetPosition(file f, integer pos)"},
			{ "trigger": "FileWriteDouble", "contents": "FileWriteDouble(file f, real value)"},
			{ "trigger": "FileWriteFloat", "contents": "FileWriteFloat(file f, real value)"},
			{ "trigger": "FileWriteLongInt", "contents": "FileWriteLongInt(file f, integer value)"},
			{ "trigger": "FileWriteShortInt", "contents": "FileWriteShortInt(file f, integer value)"},
			{ "trigger": "FileWriteString", "contents": "FileWriteString(file f, string text, integer length)"},
			{ "trigger": "FillMatrix", "contents": "FillMatrix(matcurrency currency, array rows, array columns,  array operation, array options)"},
			{ "trigger": "FillStyle", "contents": "fillstyle = FillStyle(array specification)"},
			{ "trigger": "FindOption", "contents": "option = FindOption(array options, string option_name)"},
			{ "trigger": "FindOptionValue", "contents": "option = FindOptionValue (array options, string option_name)"},
			{ "trigger": "FindPhysicalStop", "contents": "pstop_id = FindPhysicalStop(string rs_layer, integer link_id,  coordinate coord, boolean direction)"},
			{ "trigger": "FindStrings", "contents": "a = FindStrings(array input_array, array specs_array, array  options)"},
			{ "trigger": "FitBezier", "contents": "a = FitBezier(array points, double error)"},
			{ "trigger": "Floor", "contents": "value = Floor(real value1)"},
			{ "trigger": "FlowChart", "contents": "flow_chart = FlowChart()"},
			{ "trigger": "FlowChartEnd", "contents": "FlowChartEnd(array flow_chart, string node_name)"},
			{ "trigger": "FlowChartLink", "contents": "FlowChartLink(array flow_chart, string from_node, string  to_node [, int condition [, string description [, int feedback_loop]]])"},
			{ "trigger": "FlowChartLinks", "contents": "FlowChartLinks(array flow_chart, string from_node)"},
			{ "trigger": "FlowChartNode", "contents": "FlowChartNode(array flow_chart, string node_name [, string  macro_name [, string ui_name [, string description]]])"},
			{ "trigger": "FlowChartNodes", "contents": "nodes = FlowChartNodes(array flow_chart, [string node_name,[int  condition]])"},
			{ "trigger": "FlowChartReverse", "contents": "reverse = FlowChartReverse(array flowchart)"},
			{ "trigger": "FlowChartStart", "contents": "FlowChartStart(array flow_chart, string node_name)"},
			{ "trigger": "Format", "contents": "formatted_number = Format(real x, string format)"},
			{ "trigger": "GenerateBezier", "contents": "curve = GenerateBezier(array points)"},
			{ "trigger": "GenerateDEMGrid", "contents": "GenerateDEMGrid(tin t, string db_name, scope scp, int n_xtics,  int n_ytics, array options)"},
			{ "trigger": "GeneratePalette", "contents": "colors_array = GeneratePalette(color c1, color c2, integer  n, array options)"},
			{ "trigger": "GetAbsoluteWindowSize", "contents": "size = GetAbsoluteWindowSize(string window, array options)"},
			{ "trigger": "GetAnnotation", "contents": "def = GetAnnotation(string window_spec, integer id)"},
			{ "trigger": "GetAnnotations", "contents": "list = GetAnnotations(string window_spec)"},
			{ "trigger": "GetArcViewShapeInfo", "contents": "GetArcViewShapeInfo(string filename)"},
			{ "trigger": "GetArea", "contents": "a = GetArea(integer id)"},
			{ "trigger": "GetArrayScope", "contents": "scp = GetArrayScope(array coord)"},
			{ "trigger": "GetArrowheads", "contents": "ah_style = GetArrowheads(string lyr_set_name)"},
			{ "trigger": "GetAVILength", "contents": "frames = GetAVILength(string file_name)"},
			{ "trigger": "GetBNAInfo", "contents": "bna_info = GetBNAInfo(string bna_file_name)"},
			{ "trigger": "GetBorderColor", "contents": "clr = GetBorderColor(string lyr_set_name)"},
			{ "trigger": "GetBorderStyle", "contents": "sty = GetBorderStyle(string lyr_set_name)"},
			{ "trigger": "GetBorderWidth", "contents": "wid = GetBorderWidth(string lyr_set_name)"},
			{ "trigger": "GetCentroid", "contents": "c = GetCentroid(integer area_id)"},
			{ "trigger": "GetClickControl", "contents": "rslt = GetClickControl()"},
			{ "trigger": "GetClickShift", "contents": "rslt = GetClickShift()"},
			{ "trigger": "GetColorCIE", "contents": "cie_array = GetColorCIE(color c)"},
			{ "trigger": "GetColorHLS", "contents": "hls_array = GetColorHLS(color c)"},
			{ "trigger": "GetColorHSV", "contents": "hsv_array = GetColorHSV(color c)"},
			{ "trigger": "GetColumnArray", "contents": "columns = GetColumnArray(string editor_name)"},
			{ "trigger": "GetCOMCollectionObjects", "contents": "com_objects = GetCOMCollectionObjects(comobject my_object)"},
			{ "trigger": "GetCOMControlObject", "contents": "string = GetCOMControlObject(string name)"},
			{ "trigger": "GetCOMInterfaceName", "contents": "interface_name = GetCOMInterfaceName(comobject my_object)"},
			{ "trigger": "GetCOMObject", "contents": "com_object = GetCOMObject(string progid, array options)"},
			{ "trigger": "GetCompatibleMatrices", "contents": "GetCompatibleMatrices(matcurrency mc, array options)"},
			{ "trigger": "GetCoordsFromLinks", "contents": "components = GetCoordsFromLinks(string line_layer, string  id_field, array links)"},
			{ "trigger": "GetDataVector", "contents": "v = GetDataVector(string viewset, string field, array options)"},
			{ "trigger": "GetDataVectors", "contents": "a = GetDataVectors(string viewset, array fields, array  options)"},
			{ "trigger": "GetDateAndTime", "contents": "value = GetDateAndTime()"},
			{ "trigger": "GetDBFiles", "contents": "files = GetDBFiles(string db_name)"},
			{ "trigger": "GetDBInfo", "contents": "info = GetDBInfo(string db_name)"},
			{ "trigger": "GetDBLayers", "contents": "layers = GetDBLayers(string db_name)"},
			{ "trigger": "GetDBTopology", "contents": "topology = GetDBTopology(string db_file_name)"},
			{ "trigger": "GetDEMInfo", "contents": "dem_info = GetDEMInfo(string filename)"},
			{ "trigger": "GetDEMNeighbor", "contents": "neighbor_id = GetDEMNeighbor(int cell_ id, string dir)"},
			{ "trigger": "GetDirection", "contents": "direction = GetDirection(integer line_ id)"},
			{ "trigger": "GetDirectoryInfo", "contents": "info = GetDirectoryInfo(string path, string type)"},
			{ "trigger": "GetDiskSpace", "contents": "space = GetDiskSpace(string path)"},
			{ "trigger": "GetDisplayedThemes", "contents": "theme_names = GetDisplayedThemes(string lyr_set_name)"},
			{ "trigger": "GetDisplayStatus", "contents": "status = GetDisplayStatus(string lyr_set_name)"},
			{ "trigger": "GetDistance", "contents": "dist = GetDistance(coordinate c1, coordinate c2)"},
			{ "trigger": "GetDLGInfo", "contents": "dlg_info = GetDLGInfo(string filename)"},
			{ "trigger": "GetDrives", "contents": "drives = GetDrives(string type)"},
			{ "trigger": "GetDXFInfo", "contents": "dxf_info = GetDXFInfo(string dxf_file_name, string detail_flag)"},
			{ "trigger": "GetEdges", "contents": "edges_array = GetEdges(integer area_id)"},
			{ "trigger": "GetEditableFields", "contents": "fields_array = GetEditableFields(string view_name, string  field_type, array options)"},
			{ "trigger": "GetEditorFile", "contents": "filename = GetEditorFile(string editor_name)"},
			{ "trigger": "GetEditorHighlight", "contents": "highlight = GetEditorHighlight(string editor_name)"},
			{ "trigger": "GetEditorOption", "contents": "value = GetEditorOption(string editor_name, string option)"},
			{ "trigger": "GetEditorSaveFlag", "contents": "flag = GetEditorSaveFlag(string editor_name)"},
			{ "trigger": "GetEditorType", "contents": "typ = GetEditorType(string editor_name)"},
			{ "trigger": "GetEditorValues", "contents": "Values = GetEditorValues(string editor_name, array region,  string order, array options)"},
			{ "trigger": "GetEditorView", "contents": "view_bar_set = GetEditorView(string editor_name)"},
			{ "trigger": "GetEndpoints", "contents": "node_ids = GetEndpoints(integer link_id)"},
			{ "trigger": "GetEnvironmentVariable", "contents": "value = GetEnvironmentVariable(string variable)"},
			{ "trigger": "GetExpressionInfo", "contents": "info_array = GetExpressionInfo(string field_spec)"},
			{ "trigger": "GetExpressions", "contents": "field_names_array = GetExpressions(string view_name)"},
			{ "trigger": "GetField", "contents": "info_array = GetField(string field_spec)"},
			{ "trigger": "GetFieldAggregations", "contents": "aggr = GetFieldAggregations(string field_spec)"},
			{ "trigger": "GetFieldDecimals", "contents": "field_decimals = GetFieldDecimals(string field_spec)"},
			{ "trigger": "GetFieldDescription", "contents": "descr = GetFieldDescription(string field_spec)"},
			{ "trigger": "GetFieldFormat", "contents": "field_format = GetFieldFormat(string field_spec)"},
			{ "trigger": "GetFieldInfo", "contents": "field_info_array = GetFieldInfo(string field_spec)"},
			{ "trigger": "GetFieldProtection", "contents": "field_protection_flag = GetFieldProtection(string field_spec)"},
			{ "trigger": "GetFields", "contents": "fields_array = GetFields(string view_name, string field_type)"},
			{ "trigger": "GetFieldTableType", "contents": "field_type = GetFieldTableType(string field_spec)"},
			{ "trigger": "GetFieldTranslations", "contents": "translations = GetFieldTranslations(string field_spec)"},
			{ "trigger": "GetFieldType", "contents": "field_type = GetFieldType(string field_spec)"},
			{ "trigger": "GetFieldValues", "contents": "values_array = GetFieldValues(array field_specs, array  options)"},
			{ "trigger": "GetFieldWidth", "contents": "field_width = GetFieldWidth(string field_spec)"},
			{ "trigger": "GetFigureFile", "contents": "file = GetFigureFile(string figure_name)"},
			{ "trigger": "GetFigureSaveFlag", "contents": "flag = GetFigureSaveFlag(string figure_name)"},
			{ "trigger": "GetFigureType", "contents": "type = GetFigureType(string figure_name)"},
			{ "trigger": "GetFileInfo", "contents": "info = GetFileInfo(string path)"},
			{ "trigger": "GetFillColor", "contents": "c = GetFillColor(string lyr_set_name)"},
			{ "trigger": "GetFillStyle", "contents": "sty = GetFillStyle(string lyr_set_name)"},
			{ "trigger": "GetFillStyleDefinition", "contents": "fillstylearray = GetFillStyleDefinition(fillstyle style)"},
			{ "trigger": "GetFillStyleTransparency", "contents": "flag = GetFillStyleTransparency(fillstyle style)"},
			{ "trigger": "GetFirstRecord", "contents": "record_handle = GetFirstRecord(string view_set, array sort_order)"},
			{ "trigger": "GetFontInfo", "contents": "font_info = GetFontInfo(string font_name)"},
			{ "trigger": "GetFontNames", "contents": "fonts = GetFontNames(array options)"},
			{ "trigger": "GetGIRASInfo", "contents": "giras_info = GetGIRASInfo(string filename)"},
			{ "trigger": "GetGPSInfo", "contents": "GetGPSInfo()"},
			{ "trigger": "GetHardLinkClass", "contents": "class = GetHardLinkClass(string view_name)"},
			{ "trigger": "GetHatch", "contents": "style = GetHatch(string lyr_set_name)"},
			{ "trigger": "GetIcon", "contents": "icon = GetIcon(string lyr_set_name)"},
			{ "trigger": "GetIconColor", "contents": "clr = GetIconColor(string lyr_set_name)"},
			{ "trigger": "GetIconSize", "contents": "sz = GetIconSize(string lyr_set_name)"},
			{ "trigger": "GetIDField", "contents": "a = GetIDField(string layer_name)"},
			{ "trigger": "GetImageFileInfo", "contents": "a = GetImageFileInfo(string file_name)"},
			{ "trigger": "GetInterface", "contents": "ui_name = GetInterface(string macro_name)"},
			{ "trigger": "GetInternalPoint", "contents": "int_pt = GetInternalPoint(integer area_id)"},
			{ "trigger": "GetISFFInfo", "contents": "isff_info = GetISFFInfo(string isff_file_name)"},
			{ "trigger": "GetItemSelection", "contents": "selection = GetItemSelection(string item_name)"},
			{ "trigger": "GetLabelExpression", "contents": "expression = GetLabelExpression(string lyr_set_name)"},
			{ "trigger": "GetLabelOptions", "contents": "options = GetLabelOptions(string lyr_set_name, array options)"},
			{ "trigger": "GetLastError", "contents": "text = GetLastError(array options)"},
			{ "trigger": "GetLastRecord", "contents": "record_handle = GetLastRecord(string view_set, array sort_order)"},
			{ "trigger": "GetLayer", "contents": "layer_name = GetLayer()"},
			{ "trigger": "GetLayerAutoscale", "contents": "state = GetLayerAutoscale(string layer_name)"},
			{ "trigger": "GetLayerDB", "contents": "db_name = GetLayerDB(string layer_name)"},
			{ "trigger": "GetLayerDBPos", "contents": "position = GetLayerDBPos(string layer_name)"},
			{ "trigger": "GetLayerInfo", "contents": "info = GetLayerInfo(string layer_name)"},
			{ "trigger": "GetLayerNames", "contents": "names_array = GetLayerNames()"},
			{ "trigger": "GetLayerPosition", "contents": "pos = GetLayerPosition(string map_name, string layer_name)"},
			{ "trigger": "GetLayers", "contents": "layer_array = GetLayers()"},
			{ "trigger": "GetLayerScale", "contents": "scales = GetLayerScale(string layer_name)"},
			{ "trigger": "GetLayerScope", "contents": "layer_scope = GetLayerScope(string layer_name)"},
			{ "trigger": "GetLayerSetsLabel", "contents": "a = GetLayerSetsLabel(string layer_name)"},
			{ "trigger": "GetLayerType", "contents": "layer_type = GetLayerType(string layer_name)"},
			{ "trigger": "GetLayerVisibility", "contents": "visibility = GetLayerVisibility(string map_bar_layer)"},
			{ "trigger": "GetLayout", "contents": "layout_name = GetLayout()"},
			{ "trigger": "GetLayoutFile", "contents": "file = GetLayoutFile(string layout_name)"},
			{ "trigger": "GetLayoutOptions", "contents": "options = GetLayoutOptions(string layout)"},
			{ "trigger": "GetLayoutPages", "contents": "dims = GetLayoutPages(string layout_name)"},
			{ "trigger": "GetLayoutPrintSettings", "contents": "settings = GetLayoutPrintSettings()"},
			{ "trigger": "GetLayoutPrintSize", "contents": "area = GetLayoutPrintSize(string layout_name)"},
			{ "trigger": "GetLayoutResizeItems", "contents": "resize_flag = GetLayoutResizeItems()"},
			{ "trigger": "GetLayoutSaveFlag", "contents": "flag = GetLayoutSaveFlag(string layout_name)"},
			{ "trigger": "GetLayoutScale", "contents": "ratio = GetLayoutScale(string layout_name)"},
			{ "trigger": "GetLegend", "contents": "leg_info = GetLegend(string map_name)"},
			{ "trigger": "GetLegendDisplayStatus", "contents": "flag = GetLegendDisplayStatus(string set_or_theme_name)"},
			{ "trigger": "GetLegendOptions", "contents": "opts = GetLegendOptions(string map_name, array options)"},
			{ "trigger": "GetLegendSettings", "contents": "leg_set = GetLegendSettings(string map_name)"},
			{ "trigger": "GetLine", "contents": "pts = GetLine(integer id)"},
			{ "trigger": "GetLineColor", "contents": "clr = GetLineColor(string lyr_set_name)"},
			{ "trigger": "GetLineDistance", "contents": "dist = GetLineDistance(coord c, array shape_pts)"},
			{ "trigger": "GetLineStyle", "contents": "sty = GetLineStyle(string lyr_set_name)"},
			{ "trigger": "GetLineStyleDefinition", "contents": "linestylearray = GetLineStyleDefinition(linestyle style)"},
			{ "trigger": "GetLineWidth", "contents": "width = GetLineWidth(string lyr_set_name)"},
			{ "trigger": "GetLinkLayer", "contents": "link_layer = GetLinkLayer(string layer_name)"},
			{ "trigger": "GetLongPathName", "contents": "long_name = GetLongPathName(string file_name)"},
			{ "trigger": "GetLRSInfo", "contents": "info = GetLRSInfo(string lrs_layer_name)"},
			{ "trigger": "GetLRSLayers", "contents": "lrs_layers = GetLRSLayers(string rs_layer)"},
			{ "trigger": "GetManualLabelOptions", "contents": "options = GetManualLabelOptions(string lyr_name)"},
			{ "trigger": "GetMap", "contents": "map_name = GetMap()"},
			{ "trigger": "GetMapBackground", "contents": "background_settings = GetMapBackground(string map_name)"},
			{ "trigger": "GetMapCorners", "contents": "curr_layer = GetMapCorners(string map_name)"},
			{ "trigger": "GetMapCurrentLayer", "contents": "curr_layer = GetMapCurrentLayer(string map_name)"},
			{ "trigger": "GetMapDefaultScope", "contents": "default_scope = GetMapDefaultScope(string map_name)"},
			{ "trigger": "GetMapFile", "contents": "file = GetMapFile(string map_name)"},
			{ "trigger": "GetMapLabelOptions", "contents": "options = GetMapLabelOptions(string map_name, array options)"},
			{ "trigger": "GetMapLayers", "contents": "layer_array = GetMapLayers(string map_name, string layer_type)"},
			{ "trigger": "GetMapNetworkFileName", "contents": "network_filename = GetMapNetworkFileName(string map_name)"},
			{ "trigger": "GetMapOptions", "contents": "GetMapOptions(string map_name)"},
			{ "trigger": "GetMappableFieldIndices", "contents": "indices_array = GetMappableFieldIndices(string layer_name,  string field_type, array mappable_field_names)"},
			{ "trigger": "GetMappableFields", "contents": "fields_array = GetMappableFields(string layer_name, string  field_type)"},
			{ "trigger": "GetMapProjection", "contents": "proj_params = GetMapProjection(string map_name)"},
			{ "trigger": "GetMaps", "contents": "maps_info = GetMaps()"},
			{ "trigger": "GetMapSaveFlag", "contents": "flag = GetMapSaveFlag(string map_name)"},
			{ "trigger": "GetMapScope", "contents": "scp = GetMapScope(string map_name)"},
			{ "trigger": "GetMapTitle", "contents": "GetMapTitle(string map_name)"},
			{ "trigger": "GetMapUnitNames", "contents": "map_units = GetMapUnitNames(string format_type)"},
			{ "trigger": "GetMapUnits", "contents": "units = GetMapUnits(string format_type)"},
			{ "trigger": "GetMapWindowScope", "contents": "scp = GetMapWindowScope(string map_name)"},
			{ "trigger": "GetMatrices", "contents": "matrices_array = GetMatrices()"},
			{ "trigger": "GetMatrix", "contents": "matrix_handle = GetMatrix()"},
			{ "trigger": "GetMatrixBaseIndex", "contents": "base_indicies = GetMatrixBaseIndex(matrix m)"},
			{ "trigger": "GetMatrixColumnLabels", "contents": "column_labels = GetMatrixColumnLabels(matcurrency currency)"},
			{ "trigger": "GetMatrixCore", "contents": "current_core = GetMatrixCore(string matrix m)"},
			{ "trigger": "GetMatrixCoreNames", "contents": "core_names = GetMatrixCoreNames(matrix m)"},
			{ "trigger": "GetMatrixEditorColumnWidth", "contents": "width_array = GetMatrixEditorColumnWidth(string editor_name)"},
			{ "trigger": "GetMatrixEditorCurrency", "contents": "editor_currency = GetMatrixEditorCurrency(string editor_name)"},
			{ "trigger": "GetMatrixEditorFormat", "contents": "format = GetMatrixEditorFormat(string editor_name)"},
			{ "trigger": "GetMatrixEditorLabels", "contents": "label_array = GetMatrixEditorLabels(string editor_name)"},
			{ "trigger": "GetMatrixEditorSortOrder", "contents": "sort_array = GetMatrixEditorSortOrder(string editor_name)"},
			{ "trigger": "GetMatrixFile", "contents": "file_name = GetMatrixFile(matrix m)"},
			{ "trigger": "GetMatrixIndex", "contents": "curr_idx = GetMatrixIndex(matrix m)"},
			{ "trigger": "GetMatrixIndexIDs", "contents": "index_ids = GetMatrixIndexIDs(matrix m, string index_name)"},
			{ "trigger": "GetMatrixIndexNames", "contents": "matrix_indices = GetMatrixIndexNames(matrix m)"},
			{ "trigger": "GetMatrixInfo", "contents": "matrix_info = GetMatrixInfo(matrix m)"},
			{ "trigger": "GetMatrixMarginals", "contents": "marginal = GetMatrixMarginals(matcurrency currency, string  marginal_type, string row_col)"},
			{ "trigger": "GetMatrixName", "contents": "matrix_name = GetMatrixName(matrix m)"},
			{ "trigger": "GetMatrixNames", "contents": "list = GetMatrixNames()"},
			{ "trigger": "GetMatrixRowLabels", "contents": "row_labels = GetMatrixRowLabels(matcurrency currency)"},
			{ "trigger": "GetMatrixValue", "contents": "cell_value = GetMatrixValue(matcurrency currency, string  row_ID, string column_ID)"},
			{ "trigger": "GetMatrixValues", "contents": "values_array = GetMatrixValues(matcurrency currency, array  rows, array columns)"},
			{ "trigger": "GetMatrixVector", "contents": "v = GetMatrixVector(matcurrency currency, array option)"},
			{ "trigger": "GetMenu", "contents": "contents = GetMenu(string menu_name)"},
			{ "trigger": "GetMergedArea", "contents": "merged_area = GetMergedArea(string layer_set, array options)"},
			{ "trigger": "GetMIFInfo", "contents": "MIF_info = GetMIFInfo(string MIF_file_name, string detail_flag)"},
			{ "trigger": "GetMinimumSpanningCircle", "contents": "ms_circle = GetMinimumSpanningCircle(integer area_id)"},
			{ "trigger": "GetMITABInfo", "contents": "tab_info = GetMITABInfo(string tab_file_name)"},
			{ "trigger": "GetMultiLine", "contents": "pts = GetMultiLine(integer id)"},
			{ "trigger": "GetNeighbors", "contents": "neighbors = GetNeighbors(int id, array options)"},
			{ "trigger": "GetNetworkDBName", "contents": "Dbname = GetNetworkDBName(network net)"},
			{ "trigger": "GetNetworkInfo", "contents": "netinfo_array = GetNetworkInfo(network net)"},
			{ "trigger": "GetNetworkInformation", "contents": "netinfo_array = GetNetworkInformation(network net)"},
			{ "trigger": "GetNetworkInformationItem", "contents": "item = GetNetworkInformationItem(network net, string label)"},
			{ "trigger": "GetNetworkInformationLabels", "contents": "InfoLabels = GetNetworkInformationLabels(Network net)"},
			{ "trigger": "GetNetworkLinkType", "contents": "TypeName = GetNetworkLinkType(Network net, int LinkIndex)"},
			{ "trigger": "GetNetworkLinkTypeName", "contents": "TypeName = GetNetworkLinkTypeName(Network net)"},
			{ "trigger": "GetNetworkNodeLinks", "contents": "LinkArray = GetNetworkNodeLinks(Network net, int node_index)"},
			{ "trigger": "GetNextRecord", "contents": "record_handle = GetNextRecord(string view_set, string start_record_handle,  array sort_order)"},
			{ "trigger": "GetNodeFromLinks", "contents": "node_id = GetNodeFromLinks(string rs_layer, string node_id_field,  array links, coord c)"},
			{ "trigger": "GetNodeFromRoute", "contents": "node_id = GetNodeFromRoute(string rs_layer, string name,  string node_id_field, coord c)"},
			{ "trigger": "GetNodeLayer", "contents": "node_layer_name = GetNodeLayer(string layer_name)"},
			{ "trigger": "GetNodeLinks", "contents": "link_list = GetNodeLinks(integer node_id)"},
			{ "trigger": "GetNodesFromLinks", "contents": "components = GetNodesFromLinks(string line_layer, string  link_id_field, string node_id_field, array links)"},
			{ "trigger": "GetNTFInfo", "contents": "ntf_info = GetNTFInfo(array file_names)"},
			{ "trigger": "GetNTFVolume", "contents": "ntf_info = GetNTFInfo(string file_name)"},
			{ "trigger": "GetObjectClass", "contents": "class_name = GetObjectClass(object obj)"},
			{ "trigger": "GetObjectVariableNames", "contents": "variable_array = GetObjectVariableNames(object obj)"},
			{ "trigger": "GetODBCDataSourceInfo", "contents": "info_array = GetODBCDataSourceInfo(string odbc_data_source_name)"},
			{ "trigger": "GetODBCDataSourceNames", "contents": "names_array = GetODBCDataSourceNames()"},
			{ "trigger": "GetODBCFields", "contents": "field_names = GetODBCFields(string table_name, string schema_name,  string data_source_name)"},
			{ "trigger": "GetODBCLayerInfo", "contents": "GetODBCLayerInfo(string service_name, string schema_name,  string layer_name, array fields)"},
			{ "trigger": "GetODBCTables", "contents": "table_names = GetODBCTables(string odbc_data_source_name)"},
			{ "trigger": "GetOffset", "contents": "type = GetOffset(string lyr_set_name)"},
			{ "trigger": "GetOracleFields", "contents": "Field_list = GetOracleFields(string table_name, string  owner_name, string service_name)"},
			{ "trigger": "GetOracleTables", "contents": "Table_list = GetOracleTables(string service_name, array  options)"},
			{ "trigger": "GetPaperUnitNames", "contents": "paper_units = GetPaperUnitNames(string format_type)"},
			{ "trigger": "GetPaperUnits", "contents": "units = GetPaperUnits(string format_type)"},
			{ "trigger": "GetPerimeter", "contents": "perimeter = GetPerimeter(integer area_id)"},
			{ "trigger": "GetPlatformVersion", "contents": "info = GetPlatformVersion()"},
			{ "trigger": "GetPoint", "contents": "c = GetPoint(integer id)"},
			{ "trigger": "GetPolygonArea", "contents": "result = GetPolygonArea(array coords)"},
			{ "trigger": "GetPolygonPerimeter", "contents": "perimeter = GetPolygonPerimeter(array coords)"},
			{ "trigger": "GetPrevRecord", "contents": "record_handle = GetPrevRecord(string view_set, string start_record_handle,  array sort_order)"},
			{ "trigger": "GetPrintMargins", "contents": "print_margins = GetPrintMargins()"},
			{ "trigger": "GetProgram", "contents": "info = GetProgram()"},
			{ "trigger": "GetProjectionScope", "contents": "GetProjectionScope(string proj_name, array parameters)"},
			{ "trigger": "GetReadOnly", "contents": "read_only = GetReadOnly()"},
			{ "trigger": "GetReadOnlyFields", "contents": "fields_array = GetReadOnlyFields(string view_name, string  field_type, array options)"},
			{ "trigger": "GetRecord", "contents": "record_handle = GetRecord(string view_name)"},
			{ "trigger": "GetRecordCount", "contents": "record_count = GetRecordCount(string view_name, string  set_name)"},
			{ "trigger": "GetRecords", "contents": "rh_array = GetRecords(string view_set, array opts)"},
			{ "trigger": "GetRecordScope", "contents": "record_scope = GetRecordScope(string record_handle)"},
			{ "trigger": "GetRecordsValues", "contents": "values_array = GetRecordsValues(string view_set, string  start_rh, array field_names, array sort_order, int num_records, string  order, array options)"},
			{ "trigger": "GetRecordValues", "contents": "values_array = GetRecordValues(string view_name, string  record_handle, array field_names)"},
			{ "trigger": "GetRouteAttributes", "contents": "attr = GetRouteAttributes(string rs_layer, string name)"},
			{ "trigger": "GetRouteID", "contents": "id = GetRouteID(string rs_layer, string name)"},
			{ "trigger": "GetRouteIDs", "contents": "ids = GetRouteIDs(string rs_layer, array names)"},
			{ "trigger": "GetRouteLinks", "contents": "links = GetRouteLinks(string rs_layer, string name)"},
			{ "trigger": "GetRouteMilepost", "contents": "milepost_array = GetRouteMilepost(string rs_layer, string  name, coord c, integer pass)"},
			{ "trigger": "GetRouteNam", "contents": "name = GetRouteNam(string rs_layer, integer id)"},
			{ "trigger": "GetRouteNames", "contents": "names = GetRouteNames(string rs_layer)"},
			{ "trigger": "GetRouteSide", "contents": "side = GetRouteSide(string rs_layer, string name)"},
			{ "trigger": "GetRouteStops", "contents": "stops = GetRouteStops(string rs_layer, string name, boolean  attributes)"},
			{ "trigger": "GetRouteSystemChanneling", "contents": "info = GetRouteSystemChanneling(string rs_layer)"},
			{ "trigger": "GetRouteSystemFields", "contents": "fields_array = GetRouteSystemFields(string rs_layer)"},
			{ "trigger": "GetRouteSystemFiles", "contents": "info = GetRouteSystemFiles(string rs_path)"},
			{ "trigger": "GetRouteSystemInfo", "contents": "info = GetRouteSystemInfo(string rs_path)"},
			{ "trigger": "GetRouteSystemLayer", "contents": "rs_layer = GetRouteSystemLayer(string lrs_layer)"},
			{ "trigger": "GetRowOrder", "contents": "sort_sequence = GetRowOrder(string editor_name)"},
			{ "trigger": "GetRSPhysicalStopsAttr", "contents": "fields_array = GetRSPhysicalStopsAttr(string rs_layer,  array stop_ids)"},
			{ "trigger": "GetSample", "contents": "sample = GetSample(string layer_set)"},
			{ "trigger": "GetScale", "contents": "scale = GetScale(string map_name)"},
			{ "trigger": "GetScopeCorners", "contents": "corners = GetScopeCorners(scope scp)"},
			{ "trigger": "GetScopeRect", "contents": "coords = GetScopeRect(scope scp)"},
			{ "trigger": "GetSDOInfo", "contents": "sdo_info = GetSDOInfo(string service_name, string schema_name,  string layer_name, string geom_field)"},
			{ "trigger": "GetSelectAutoRedraw", "contents": "state = GetSelectAutoRedraw()"},
			{ "trigger": "GetSelectDisplay", "contents": "state = GetSelectDisplay()"},
			{ "trigger": "GetSelectedAnnotations", "contents": "list = GetSelectedAnnotations(string window_spec)"},
			{ "trigger": "GetSetCount", "contents": "count = GetSetCount(string set_name)"},
			{ "trigger": "GetSetIDs", "contents": "a = GetSetIDs(string lyr_set_name)"},
			{ "trigger": "GetSetPosition", "contents": "pos = GetSetPosition(string set_name)"},
			{ "trigger": "GetSets", "contents": "sets_list = GetSets(string view_name)"},
			{ "trigger": "GetSetScale", "contents": "scales = GetSetScale(string set)"},
			{ "trigger": "GetSetScope", "contents": "GetSetScope(string set_name)"},
			{ "trigger": "GetShortPathName", "contents": "short_name = GetShortPathName(string file_name)"},
			{ "trigger": "GetSnapshot", "contents": "snapshot_info = GetSnapshot(string map_name, string snapshot_name)"},
			{ "trigger": "GetSnapshots", "contents": "snapshot_names = GetSnapshots(string map_name)"},
			{ "trigger": "GetStopLocation", "contents": "desc = GetStopLocation(string street_field, string rs_layer,  int stop_id, double threshold)"},
			{ "trigger": "GetStopRouteName", "contents": "name = GetStopRouteName(string rs_layer, integer stop_id)"},
			{ "trigger": "GetStopsRouteNames", "contents": "names = GetStopsRouteNames(string rs_layer, array stop_ids)"},
			{ "trigger": "GetStreetLocation", "contents": "desc = GetStreetLocation(string street_field_spec, coord  c, double threshold)"},
			{ "trigger": "GetSystemDirectory", "contents": "path = GetSystemDirectory()"},
			{ "trigger": "GetSystemInfo", "contents": "sysinfo = GetSystemInfo()"},
			{ "trigger": "GetTableModifyFlag", "contents": "flag = GetTableModifyFlag(string view_name)"},
			{ "trigger": "GetTableStructure", "contents": "field_info = GetTableStructure(string view_name)"},
			{ "trigger": "GetTempFileName", "contents": "name = GetTempFileName(string path)"},
			{ "trigger": "GetTempPath", "contents": "dir = GetTempPath()"},
			{ "trigger": "GetTheme", "contents": "info = GetTheme(string theme_name)"},
			{ "trigger": "GetThemeClassCounts", "contents": "counts = GetThemeClassCounts(string theme_name)"},
			{ "trigger": "GetThemeClasses", "contents": "info = GetThemeClasses(string theme_name)"},
			{ "trigger": "GetThemeClassLabels", "contents": "labels = GetThemeClassLabels(string theme_name)"},
			{ "trigger": "GetThemeClassValues", "contents": "defs = GetThemeClassValues(string theme_name)"},
			{ "trigger": "GetThemeFillColors", "contents": "clrs = GetThemeFillColors(string theme_name)"},
			{ "trigger": "GetThemeFillStyles", "contents": "thm_styles = GetThemeFillStyles(string theme_name)"},
			{ "trigger": "GetThemeIconColors", "contents": "icn_clrs = GetThemeIconColors(string theme_name)"},
			{ "trigger": "GetThemeIcons", "contents": "icns = GetThemeIcons(string theme_name)"},
			{ "trigger": "GetThemeLineColors", "contents": "clrs = GetThemeLineColors(string theme_name)"},
			{ "trigger": "GetThemeLineStyles", "contents": "line_styles = GetThemeLineStyles(string theme_name)"},
			{ "trigger": "GetThemeLineWidths", "contents": "line_widths = GetThemeLineWidths(string theme_name)"},
			{ "trigger": "GetThemeOptions", "contents": "options = GetThemeOptions(string theme_name)"},
			{ "trigger": "GetThemes", "contents": "theme_names = GetThemes(string layer)"},
			{ "trigger": "GetThemeSamples", "contents": "sample_array = GetThemeSamples(string theme_name)"},
			{ "trigger": "GetThemeStatistics", "contents": "stats = GetThemeStatistics(string theme_name, integer sample_size)"},
			{ "trigger": "GetTIFFDimensions", "contents": "dims = GetTIFFDimensions(string filename)"},
			{ "trigger": "GetUnitSize", "contents": "GetUnitSize(string a_unit, string b_unit)"},
			{ "trigger": "GetVDFParameters", "contents": "GetVDFParameters(string filename)"},
			{ "trigger": "GetViewJoinInfo", "contents": "info_array = GetViewJoinInfo(string view_name)"},
			{ "trigger": "GetViewLayer", "contents": "layer_name = GetViewLayer(string view_name)"},
			{ "trigger": "GetViewParents", "contents": "info_array = GetViewParents(string view_name)"},
			{ "trigger": "GetViewReadOnly", "contents": "read_only_flag = GetViewReadOnly(string view_name)"},
			{ "trigger": "GetViews", "contents": "view_info = GetViews(string layer_name)"},
			{ "trigger": "GetViewScope", "contents": "view_scope = GetViewScope(string view_name)"},
			{ "trigger": "GetViewStructure", "contents": "field_info = GetViewStructure(string view_name)"},
			{ "trigger": "GetViewTableInfo", "contents": "info_array = GetViewTableInfo(string view_name)"},
			{ "trigger": "GetWAVLength", "contents": "length = GetWAVLength(string file_name)"},
			{ "trigger": "GetWindowData", "contents": "array = GetWindowData(string window_name)"},
			{ "trigger": "GetWindowName", "contents": "win_name = GetWindowName()"},
			{ "trigger": "GetWindowPosition", "contents": "win_position = GetWindowPosition(string window)"},
			{ "trigger": "GetWindows", "contents": "window_list = GetWindows(string type_name)"},
			{ "trigger": "GetWindowSize", "contents": "size = GetWindowSize(string window)"},
			{ "trigger": "GetWindowType", "contents": "win_typ = GetWindowType()"},
			{ "trigger": "GreatCircleMidpoint", "contents": "midpt = GreatCircleMidpoint(coordinate c1, coordinate c2)"},
			{ "trigger": "Help", "contents": "Help(string help_topic)"},
			{ "trigger": "HideDbox", "contents": "HideDbox(string dbox_name)"},
			{ "trigger": "HideItem", "contents": "HideItem(string item_name)"},
			{ "trigger": "HideLegend", "contents": "HideLegend (string map_name)"},
			{ "trigger": "HideMapLabels", "contents": "HideMapLabels(string map_name)"},
			{ "trigger": "HideTheme", "contents": "HideTheme(string set_name, string theme_name)"},
			{ "trigger": "IDToRecordHandle", "contents": "record_handle = IDToRecordHandle(integer id)"},
			{ "trigger": "ImportArcViewShape", "contents": "ImportArcViewShape(string filename, string new_db_name,  array options)"},
			{ "trigger": "ImportBNA", "contents": "ImportBNA(string filename, string new_db_name, string layer_type,  string table_name, integer n_names, array options)"},
			{ "trigger": "ImportBTS", "contents": "ImportBTS(string filename, string new_db_name, string layer_type,  array options)"},
			{ "trigger": "ImportCSV", "contents": "ImportCSV(string filename, string new_db_name, string layer_type,  array options)"},
			{ "trigger": "ImportDEM", "contents": "ImportDEM(array filenames, string new_db_name, array options)"},
			{ "trigger": "ImportDLG", "contents": "ImportDLG(array filenames, string new_db_name, string layer_type,  array options)"},
			{ "trigger": "ImportDXF", "contents": "dxf_vw = ImportDXF(string filename, string new_db_name,  string layer_type, array options)"},
			{ "trigger": "ImportE00", "contents": "ImportE00(string filename, string new_db_name, string layer_type,  string table_name, array options)"},
			{ "trigger": "ImportFromView", "contents": "ImportFromView(string view_set_name, array fields, string  new_db_name, array options)"},
			{ "trigger": "ImportGIRAS", "contents": "ImportGIRAS(array filenames, string new_db_name, array  options)"},
			{ "trigger": "ImportISFF", "contents": "ImportISFF(array filenames, string new_db_name, string  layer_type, string units, array options)"},
			{ "trigger": "ImportMatrix", "contents": "ImportMatrix(matcurrency currency, string id_column_name,  array column_names, string dimension, array matrix_ids)"},
			{ "trigger": "ImportMIF", "contents": "ImportMIF(string filename, string new_db_name, string layer_type,  array options)"},
			{ "trigger": "ImportNTF", "contents": "ImportNTF(array filenames, string data_product, string  level, string new_db_name, string layer_type, string table_name, array  options)"},
			{ "trigger": "ImportTiger", "contents": "ImportTiger(integer version, array filenames, string db_name,  array options)"},
			{ "trigger": "In", "contents": "In(array args [, int validate])"},
			{ "trigger": "InsertArrayElements", "contents": "new_array = InsertArrayElements(array my_array, integer  start, array to_insert)"},
			{ "trigger": "IntToString", "contents": "value_string = IntToString(integer int_value)"},
			{ "trigger": "IsFlowChart", "contents": "IsFlowChart(array flow_chart)"},
			{ "trigger": "IsImageRegisterable", "contents": "bool = IsImageRegisterable(string layer_name)"},
			{ "trigger": "IsKindOfClass", "contents": "answer = IsKindOfClass(object obj, string class_name)"},
			{ "trigger": "IsLayer", "contents": "answer = IsLayer(string layer_name, array types)"},
			{ "trigger": "IsLayerExportable", "contents": "bool = IsLayerExportable( string layer_name)"},
			{ "trigger": "IsMatrixSquare", "contents": "square_flag = IsMatrixSquare(matcurrency currency)"},
			{ "trigger": "IsMember", "contents": "answer = IsMember(string set_name, string row_handle)"},
			{ "trigger": "IsNeighbor", "contents": "neighbors = IsNeighbor(int id1, int id2, array options)"},
			{ "trigger": "IsViewExportable", "contents": "answer = IsViewExportable(string view_name)"},
			{ "trigger": "IsWindow", "contents": "answer = IsWindow(string window_name, array types)"},
			{ "trigger": "JoinLinks", "contents": "new_ids = JoinLinks(integer ID1, integer ID2, array options)"},
			{ "trigger": "JoinNodes", "contents": "ids = JoinNodes(integer ID1, integer ID2, array options)"},
			{ "trigger": "JoinStrings", "contents": "joined = JoinStrings(array values, string delimiter)"},
			{ "trigger": "JoinTableToLayer", "contents": "JoinTableToLayer(string database, string layer, string  class, string primary, string secondary, string field, array options)"},
			{ "trigger": "JoinViews", "contents": "new_view_name = JoinViews(string joined_view_name, string  master_field_spec, string slave_field_spec, array options)"},
			{ "trigger": "JoinViewsMulti", "contents": "new_view_name = JoinViewsMulti(string joined_view_name,  array master_field_specs, array slave_field_specs, array options)"},
			{ "trigger": "Kurtosis", "contents": "value = kurtosis(array data_array)"},
			{ "trigger": "LaunchDocument", "contents": "LaunchDocument(string doc, array options)"},
			{ "trigger": "LaunchProgram", "contents": "LaunchProgram(string command_line)"},
			{ "trigger": "LayoutPrintSetup", "contents": "pages = LayoutPrintSetup(string layout_name)"},
			{ "trigger": "LayoutProperties", "contents": "props = LayoutProperties()"},
			{ "trigger": "Left", "contents": "value = Left(string my_string, integer n)"},
			{ "trigger": "Len", "contents": "n = Len(string input_string)"},
			{ "trigger": "LineStyle", "contents": "linestyle = LineStyle(array specification)"},
			{ "trigger": "ListExcelSheets", "contents": "sheetnames_array = ListExcelSheets(string excel_file)"},
			{ "trigger": "ListTableFiles", "contents": "filenames_array = ListTableFiles(string view_name, string  class, string primary, string secondary)"},
			{ "trigger": "LoadArray", "contents": "my_array = LoadArray(string file_name)"},
			{ "trigger": "LoadNetworkMovementTable", "contents": "LoadNetworkMovementTable(network net, array options)"},
			{ "trigger": "LoadResourceFile", "contents": "LoadResourceFile(string ui_db_name, string filename, string  flags)"},
			{ "trigger": "LocateDBs", "contents": "paths = LocateDBs(array names)"},
			{ "trigger": "LocateNearestRecord", "contents": "record_handle = LocateNearestRecord(coordinate location,  real search_distance [, array options])"},
			{ "trigger": "LocateNearestRecords", "contents": "record_handles = LocateNearestRecords(coordinate location,  real search_distance, array options)"},
			{ "trigger": "LocateRecord", "contents": "record_handle = LocateRecord(string view_set, string field_name,  array value_array, array options)"},
			{ "trigger": "Log", "contents": "log_value = Log(real input_value)"},
			{ "trigger": "Log10", "contents": "log_value = Log10(real input_value)"},
			{ "trigger": "Lower", "contents": "string = Lower (string input_string)"},
			{ "trigger": "LPad", "contents": "padded_string = LPad(string input_string, integer target_length)"},
			{ "trigger": "MapCoordToPixelXY", "contents": "xy = MapCoordToPixelXY(string map_name, coordinate c)"},
			{ "trigger": "MapCoordToXY", "contents": "xy = MapCoordToXY(string map_name, coordinate c)"},
			{ "trigger": "MapPixelXYToCoord", "contents": "c = MapPixelXYToCoord(string map_name, array x_and_y)"},
			{ "trigger": "MapPrintSetup", "contents": "opts = MapPrintSetup(boolean fixed_pointsize_state, boolean  fixed_scale_state)"},
			{ "trigger": "MapXYToCoord", "contents": "c = MapXYToCoord(string map_name, array x_and_y)"},
			{ "trigger": "MatrixCellbyCell", "contents": "new_matrix = MatrixCellbyCell(matcurrency left, matcurrency  right, array options)"},
			{ "trigger": "MatrixRMSE", "contents": "stat_array = MatrixRMSE(matcurrency mc1, matcurrency mc2)"},
			{ "trigger": "MatrixStatistics", "contents": "stat_array = MatrixStatistics(matrix m, array opts)"},
			{ "trigger": "Max", "contents": "max_value = Max(real value1, real value2)"},
			{ "trigger": "MaximizeWindow", "contents": "MaximizeWindow(window_name)"},
			{ "trigger": "Mean", "contents": "avg_value = Mean(array data_values)"},
			{ "trigger": "Median", "contents": "avg_value = Median(array data_values)"},
			{ "trigger": "MergeByValue", "contents": "MergeByValue(string geofile_name, string new_layer_name,  string lyr_set_name, string field, string output_table_type, array field_specs,  array options)"},
			{ "trigger": "MergeGeography", "contents": "MergeGeography(string dest_layer, string source_layer_set,  array options)"},
			{ "trigger": "MergeMatrixElements", "contents": "MergeMatrixElements(matcurrency target_currency, array  matcurrencies, array row_ids, array column_ids, array options)"},
			{ "trigger": "MergeMilepostViews", "contents": "MergeMilepostViews(string file_name, string file_type,  array view_1, array view_2, array options)"},
			{ "trigger": "MessageBox", "contents": "button = MessageBox(string message, array options)"},
			{ "trigger": "Min", "contents": "min_value = Min(real value1, real value2)"},
			{ "trigger": "MinimizeWindow", "contents": "MinimizeWindow(string window_name)"},
			{ "trigger": "MinimumSpanningCircle", "contents": "MinimumSpanningCircle(array point_coords)"},
			{ "trigger": "Mod", "contents": "mod_value = Mod(real value1, real value2)"},
			{ "trigger": "ModifyRoute", "contents": "ModifyRoute(string rs_layer, string name, string side,  array links, array stops, array extra_attr)"},
			{ "trigger": "ModifyRouteSystem", "contents": "ModifyRouteSystem(string rs_path, array options)"},
			{ "trigger": "ModifyTable", "contents": "ModifyTable(string view_name, array field_info_array)"},
			{ "trigger": "MoveAlongGreatCircle", "contents": "end_pt = MoveAlongGreatCircle(coord start, real heading,  real distance)"},
			{ "trigger": "MoveAnnotation", "contents": "MoveAnnotation(string window_spec, integer id, integer  delta_x, integer delta_y)"},
			{ "trigger": "MoveNode", "contents": "id = MoveNode(integer ID, coordinate location, array options)"},
			{ "trigger": "MovePoint", "contents": "id = MovePoint(integer ID, coordinate location)"},
			{ "trigger": "MultiplyMatrix", "contents": "new_matrix = MultiplyMatrix(matcurrency left, matcurrency  right, array options)"},
			{ "trigger": "MultiplyMatrixElements", "contents": "MultiplyMatrixElements(matcurrency currency, string first_core,  string second_core, array row_ids, array column_ids, array options)"},
			{ "trigger": "NetworkEnableDisableLinkByConditions", "contents": "NetworkEnableDisableLinkByConditions(network net_handle,  array conditions, array options)"},
			{ "trigger": "NetworkEnableDisableLinkByExpression", "contents": "NetworkEnableDisableLinkByExpression(network net_handle,  string expression, array options)"},
			{ "trigger": "NetworkForwardStar", "contents": "nfs_array = NetworkForwardStar(network net_handle)"},
			{ "trigger": "NetworkGetTurnPenalty", "contents": "TurnPenalty = NetworkGetTurnPenalty(network net, int from_link_idx,  int to_link_idx)"},
			{ "trigger": "NetworkLinkCosts", "contents": "lcosts_array = NetworkLinkCosts(network net_handle, integer  var_index)"},
			{ "trigger": "NetworkLinkID", "contents": "Link ID = NetworkLinkID(network net_handle, integer index)"},
			{ "trigger": "NetworkLinkIDs", "contents": "lids_array = NetworkLinkIDs(network net_handle)"},
			{ "trigger": "NetworkLinkLocate", "contents": "Link = NetworkLinkLocate(network net, int id)"},
			{ "trigger": "NetworkLinks", "contents": "n_links = NetworkLinks(network net_handle)"},
			{ "trigger": "NetworkLinkVarNames", "contents": "link_names = NetworkLinkVarNames(network net_handle)"},
			{ "trigger": "NetworkMovementTableLoaded", "contents": "string = NetworkMovementTableLoaded(network net)"},
			{ "trigger": "NetworkNodeCosts", "contents": "ncosts_array = NetworkNodeCosts(network net_handle, integer  var_index)"},
			{ "trigger": "NetworkNodeID", "contents": "Node_ID = NetworkNodeID(network net_handle, integer index)"},
			{ "trigger": "NetworkNodeIDs", "contents": "nids_array = NetworkNodeIDs(network net_handle)"},
			{ "trigger": "NetworkNodes", "contents": "n_nodes = NetworkNodes(network net_handle)"},
			{ "trigger": "NetworkPartitioning", "contents": "NetworkPartitioning(network net_handle, array options)"},
			{ "trigger": "NetworkVerifyExpression", "contents": "NetworkVerifyExpression(network net_handle, string expression,  array options)"},
			{ "trigger": "NextOccurrence", "contents": "nextoccur = NextOccurrence(string date, string day)"},
			{ "trigger": "NullToZero", "contents": "new_value = NullToZero(real old_value)"},
			{ "trigger": "ObjectHasMethod", "contents": "answer = ObjectHasMethod(object obj, string method_name)"},
			{ "trigger": "OneWayTable", "contents": "new_matrix = OneWayTable(string mat_name, string view_set,  array tab_spec, array mat_options)"},
			{ "trigger": "OpenEditor", "contents": "editor_name = OpenEditor(string filename, array options)"},
			{ "trigger": "OpenEditorFromAnnotation", "contents": "ed_name = OpenEditorFromAnnotation(string layout_name,  integer id, array options)"},
			{ "trigger": "OpenFigure", "contents": "figure_name = OpenFigure(string file_name, array options)"},
			{ "trigger": "OpenFigureFromAnnotation", "contents": "figure_name = OpenFigureFromAnnotation(string layout_name,  integer id, array options)"},
			{ "trigger": "OpenFile", "contents": "file = OpenFile(string file_name, string mode)"},
			{ "trigger": "OpenLayout", "contents": "layout_name = OpenLayout(string file_name, array options)"},
			{ "trigger": "OpenMap", "contents": "map_name = OpenMap(string path, array options)"},
			{ "trigger": "OpenMapFromAnnotation", "contents": "map_name = OpenMapFromAnnotation(string layout_name, integer  id, array options)"},
			{ "trigger": "OpenMatrix", "contents": "matrix = OpenMatrix(string file_name, string file_based)"},
			{ "trigger": "OpenTable", "contents": "view_name = OpenTable(string desired_view_name, string  table_type, array table_spec [, array options])"},
			{ "trigger": "OpenWorkspace", "contents": "OpenWorkspace(string file_name, array options)"},
			{ "trigger": "OptimizeDatabase", "contents": "OptimizeDatabase(string geofile_name, string temp_path)"},
			{ "trigger": "Out", "contents": "Out(array args)"},
			{ "trigger": "Param", "contents": "Param(array args [, int validate])"},
			{ "trigger": "ParseString", "contents": "pieces = ParseString(string s, string delimiters [, array  options])"},
			{ "trigger": "PathCoords", "contents": "pts = PathCoords(string id_field, array link_ids, array  link_dirs)"},
			{ "trigger": "PathDirections", "contents": "PathDirections(array link_ids, array link_dirs, string  link_name, string out_filename, string id_field_name, array options)"},
			{ "trigger": "Pause", "contents": "Pause(integer interval)"},
			{ "trigger": "Percentile", "contents": "pct_value = Percentile(array input_values, integer pctile)"},
			{ "trigger": "PlaySlideshow", "contents": "PlaySlideshow(array slideshow, array options)"},
			{ "trigger": "PlaySound", "contents": "PlaySound(string soundfile, string disposition)"},
			{ "trigger": "Position", "contents": "location = Position(string big_string, string search_string)"},
			{ "trigger": "PositionFrom", "contents": "location = PositionFrom(int start_pos, string big_string,  string search_string)"},
			{ "trigger": "PositionTo", "contents": "location = PositionTo(int end_pos, string big_string, string  search_string)"},
			{ "trigger": "Pow", "contents": "result = Pow(real input_value, real input_power)"},
			{ "trigger": "PrintEditor", "contents": "PrintEditor(string editor_name, integer start_page, integer  end_page, array options)"},
			{ "trigger": "PrintFigure", "contents": "PrintFigure()"},
			{ "trigger": "PrintLayout", "contents": "PrintLayout(integer start_page, integer end_page)"},
			{ "trigger": "PrintMap", "contents": "PrintMap(array options)"},
			{ "trigger": "Proper", "contents": "new_string = Proper(string old_string)"},
			{ "trigger": "PushAnnotationToBack", "contents": "id = PushAnnotationToBack(string window_spec, integer id)"},
			{ "trigger": "PutInRecycleBin", "contents": "PutInRecycleBin(string file_or_folder)"},
			{ "trigger": "RandomNumber", "contents": "rand_value = RandomNumber()"},
			{ "trigger": "ReadArray", "contents": "result = ReadArray(file fptr)"},
			{ "trigger": "ReadLine", "contents": "line = ReadLine(file fptr)"},
			{ "trigger": "ReadNetwork", "contents": "net_handle = ReadNetwork(string file_name)"},
			{ "trigger": "ReadSizedArray", "contents": "result = ReadSizedArray(file fptr, integer n)"},
			{ "trigger": "RealToInt", "contents": "int_value = RealToInt(real real_value)"},
			{ "trigger": "RealToString", "contents": "str_value = RealToString(real_value)"},
			{ "trigger": "RecordHandleToID", "contents": "id = RecordHandleToID(string record_handle)"},
			{ "trigger": "RedrawEditor", "contents": "RedrawEditor(string editor_name)"},
			{ "trigger": "RedrawMap", "contents": "RedrawMap(string map_name)"},
			{ "trigger": "RegisterImage", "contents": "error_array = RegisterImage(string layer_name, array image_points,  array map_points, array options)"},
			{ "trigger": "ReloadRouteSystem", "contents": "ReloadRouteSystem(string rs_path)"},
			{ "trigger": "RemoveDirectory", "contents": "RemoveDirectory(string dir_name)"},
			{ "trigger": "RemoveMenuItem", "contents": "RemoveMenuItem(string menu_item)"},
			{ "trigger": "RenameDatabase", "contents": "RenameDatabase(string old_name, string new_name)"},
			{ "trigger": "RenameField", "contents": "RenameField(string field_spec, string new_name)"},
			{ "trigger": "RenameFile", "contents": "RenameFile(string source_file, string dest_file)"},
			{ "trigger": "RenameLayer", "contents": "new_name = RenameLayer(string map_layer, string new_layer_name,  array options)"},
			{ "trigger": "RenameSet", "contents": "actual_name = RenameSet(string set_name, string new_name)"},
			{ "trigger": "RenameTableFiles", "contents": "RenameTableFiles(string view_name, string class, string  primary, string secondary, string new_primary, string new_secondary)"},
			{ "trigger": "ResetCursor", "contents": "ResetCursor()"},
			{ "trigger": "ResetLogFile", "contents": "ResetLogFile()"},
			{ "trigger": "ResetReportFile", "contents": "ResetReportFile()"},
			{ "trigger": "ReshapeLink", "contents": "ReshapeLink(integer ID, array line_coordinates, array options)"},
			{ "trigger": "RestoreWindow", "contents": "RestoreWindow(string window_name)"},
			{ "trigger": "Return", "contents": "Return(value)"},
			{ "trigger": "ReverseLink", "contents": "reversed_id = ReverseLink(integer ID, array options)"},
			{ "trigger": "Round", "contents": "rounded_value = Round(real input_value, integer n_decimals)"},
			{ "trigger": "RouteDirections", "contents": "RouteDirections(string rs_layer, string name, string link_name_field,  string output_path, string link_id_field, array options)"},
			{ "trigger": "RPad", "contents": "padded_string = RPad(string input_string, integer target_length)"},
			{ "trigger": "RubberSheet", "contents": "RubberSheet(string layer_bar_set, string db_name, array  old, array new, array options)"},
			{ "trigger": "RunDbox", "contents": "return_value = RunDbox(string dbox_name, argument1, argument2,...,  argument8)"},
			{ "trigger": "RunMacro", "contents": "return_value = RunMacro(string macro_name, argument1, argument2,...,  argument8)"},
			{ "trigger": "RunProgram", "contents": "status = RunProgram(string command_line, array options)"},
			{ "trigger": "SampleArea", "contents": "sample_area = SampleArea (real line_width, linestyle line_style,  color line_clr, fillstyle fill_style, color fill_clr, array options)"},
			{ "trigger": "SampleLine", "contents": "sample_line = SampleLine(real width, linestyle line_style,  color clr, array options)"},
			{ "trigger": "SamplePoint", "contents": "sample_point = SamplePoint(string type, string name, real  size_or_index, color clr, array options)"},
			{ "trigger": "SampleText", "contents": "sample_text = SampleText(string text, string font, array  options)"},
			{ "trigger": "SampleValues", "contents": "vals = SampleValues(string field_spec, integer num_unique,  integer num_scanned, array options)"},
			{ "trigger": "SaveArray", "contents": "SaveArray(array my_array, string file_name)"},
			{ "trigger": "SaveEditor", "contents": "SaveEditor(string editor_name, string filename [, array  options])"},
			{ "trigger": "SaveEditorToBitmap", "contents": "SaveEditorToBitmap(string editor_name, string bitmap_file)"},
			{ "trigger": "SaveEditorToImage", "contents": "SaveEditorToImage(string editor_name, string file_name,  string type, array options)"},
			{ "trigger": "SaveEditorToJPEG", "contents": "SaveEditorToJPEG(string editor_name, string jpeg_name,  int quality)"},
			{ "trigger": "SaveFigure", "contents": "SaveFigure(string figure_name, string file_name)"},
			{ "trigger": "SaveFigureToBitmap", "contents": "SaveFigureToBitmap(string figure_name, string file_name)"},
			{ "trigger": "SaveFigureToImage", "contents": "SaveFigureToImage(string figure_name, string file_name,  string type, array options)"},
			{ "trigger": "SaveFigureToJPEG", "contents": "SaveFigureToJPEG(string figure_name, string jpeg_name,  int quality)"},
			{ "trigger": "SaveFigureToMetafile", "contents": "SaveFigureToMetafile(string figure_name, string emf_name)"},
			{ "trigger": "SaveLayout", "contents": "SaveLayout(string layout_name, string file_name [, array  options])"},
			{ "trigger": "SaveLayoutToBitmap", "contents": "SaveLayoutToBitmap(string map_name, string bitmap_file)"},
			{ "trigger": "SaveLayoutToImage", "contents": "SaveLayoutToImage(string layout_name, string file_name,  string type, array options)"},
			{ "trigger": "SaveLayoutToJPEG", "contents": "SaveLayoutToJPEG(string layout_name, string jpeg_name,  int quality)"},
			{ "trigger": "SaveLayoutToMetafile", "contents": "SaveLayoutToMetafile(string figure_name, string emf_name)"},
			{ "trigger": "SaveLegendToImage", "contents": "SaveLegendToImage(string map_name, string file_name, string  type, array options)"},
			{ "trigger": "SaveMap", "contents": "SaveMap(string map_name, string path [, array options[)"},
			{ "trigger": "SaveMapToBitmap", "contents": "SaveMapToBitmap(string map_name, string bitmap_file)"},
			{ "trigger": "SaveMapToImage", "contents": "SaveMapToImage(string map_name, string file_name, string  type, array options)"},
			{ "trigger": "SaveMapToJPEG", "contents": "SaveMapToJPEG(string map_name, string jpeg_name, int quality)"},
			{ "trigger": "SaveMapToMetafile", "contents": "SaveMapToMetafile(string map_name, string emf_name, array  options)"},
			{ "trigger": "SaveWorkspace", "contents": "SaveWorkspace(string file_name [, array options])"},
			{ "trigger": "Scope", "contents": "Scope(coordinate center_point, real horiz_extent, real  vert_extent, real angle)"},
			{ "trigger": "ScopeInScope", "contents": "result = ScopeInScope(scope little_scope, scope big_scope)"},
			{ "trigger": "ScopeIntersect", "contents": "new_scope = ScopeIntersect(scope scp1, scope scp2)"},
			{ "trigger": "ScopeOnScope", "contents": "result = ScopeOnScope(scope scp1, scope scp2)"},
			{ "trigger": "ScopeUnion", "contents": "new_scope = ScopeUnion(scope scp1, scope scp2)"},
			{ "trigger": "SelectAll", "contents": "n_selected = SelectAll(string set_name)"},
			{ "trigger": "SelectAllAnnotations", "contents": "SelectAllAnnotations(string window_spec)"},
			{ "trigger": "SelectAnnotation", "contents": "SelectAnnotation(string window_spec, integer id)"},
			{ "trigger": "SelectByCircle", "contents": "n_selected = SelectByCircle(string set_name, string operation,  circle search_area [, array options])"},
			{ "trigger": "SelectByCoord", "contents": "n_selected = SelectByCoord(string set_name, string operation,  coord coordinate, real threshold [, array options])"},
			{ "trigger": "SelectByIDFile", "contents": "n_selected = SelectByIDFile (string set_name, string operation,  string id_file [, array options])"},
			{ "trigger": "SelectByIDs", "contents": "n_selected = SelectByIDs(string set_name, string operation,  array IDs [, array options])"},
			{ "trigger": "SelectByMapWindow", "contents": "n_selected = SelectByMapWindow(string set_name, string  operation [, array options])"},
			{ "trigger": "SelectByQuery", "contents": "n_selected = SelectByQuery (string set_name, string operation,  string query [, array options])"},
			{ "trigger": "SelectByQueryFile", "contents": "n_selected = SelectByQueryFile(string set_name, string  operation, string query_file [, array options])"},
			{ "trigger": "SelectByScope", "contents": "n_selected = SelectByScope(string set_name, string operation,  scope scope_value [, array options])"},
			{ "trigger": "SelectByShape", "contents": "n_selected = SelectByShape (string set_name, string operation,  array shape [, array options])"},
			{ "trigger": "SelectByVicinity", "contents": "n_selected = SelectByVicinity (string set_name, string  operation, string source_layer_set, real buffer_size [, array options])"},
			{ "trigger": "SelectConnectedLinks", "contents": "set_name = SelectConnectedLinks(network net_handle, integer  node_id, string set_name, string view_name)"},
			{ "trigger": "SelectFromNetwork", "contents": "SelectFromNetwork(string set_name, string operation, network  net_handle, array options)"},
			{ "trigger": "SelectNearestFeatures", "contents": "n_selected = SelectNearestFeatures(string set_name, string  operation, string source_layer, real threshold [, array options])"},
			{ "trigger": "SelectNone", "contents": "n_selected = SelectNone(string set_name)"},
			{ "trigger": "SelectRecord", "contents": "n_selected = SelectRecord (string set_name)"},
			{ "trigger": "SelfAggregate", "contents": "new_view_name = SelfAggregate(string aggregate_view_name,  string aggregate_field_spec, array options)"},
			{ "trigger": "SendMail", "contents": "SendMail(array options)"},
			{ "trigger": "SendProgramMessage", "contents": "SendProgramMessage(array specification)"},
			{ "trigger": "SendProgramRequest", "contents": "result = SendProgramRequest(array specification)"},
			{ "trigger": "SetAlternateInterface", "contents": "SetAlternateInterface(string ui_db_name)"},
			{ "trigger": "SetAND", "contents": "n = SetAND(string set_name, array input_sets)"},
			{ "trigger": "SetAnnotation", "contents": "SetAnnotation(string window_spec, integer id, array specification)"},
			{ "trigger": "SetArrowheads", "contents": "SetArrowheads(string lyr_set_name, string ah_style)"},
			{ "trigger": "SetBorderColor", "contents": "SetBorderColor(string lyr_set_name, color border_color)"},
			{ "trigger": "SetBorderStyle", "contents": "SetBorderStyle(string lyr_set_name, linestyle border_style)"},
			{ "trigger": "SetBorderWidth", "contents": "SetBorderWidth(string lyr_set_name, real border_width)"},
			{ "trigger": "SetCheck", "contents": "SetCheck(string item_name, string check)"},
			{ "trigger": "SetColumnArray", "contents": "SetColumnArray(string editor_name, array names)"},
			{ "trigger": "SetCOMControlTitle", "contents": "SetCOMControlTitle(string name, string title)"},
			{ "trigger": "SetCopy", "contents": "n = SetCopy(string output_set, string input_set)"},
			{ "trigger": "SetCursor", "contents": "SetCursor(string cursor_type)"},
			{ "trigger": "SetDataVector", "contents": "SetDataVector(string viewset, string field, vector v, array  options)"},
			{ "trigger": "SetDataVectors", "contents": "SetDataVectors(string viewset, array a, array options)"},
			{ "trigger": "SetDefaultDisplay", "contents": "SetDefaultDisplay(string layer_name, string filename)"},
			{ "trigger": "SetDefaults", "contents": "SetDefaults(array defaults)"},
			{ "trigger": "SetDisplayStatus", "contents": "SetDisplayStatus(string lyr_set_name, string new_status)"},
			{ "trigger": "SetEditorHighlight", "contents": "SetEditorHighlight(string editor_name, array highlight)"},
			{ "trigger": "SetEditorOption", "contents": "SetEditorOption(string editor_name, string option, string  value)"},
			{ "trigger": "SetEditorValues", "contents": "SetEditorValues(string editor_name, array region, string  method, array params, array options)"},
			{ "trigger": "SetEditorView", "contents": "SetEditorView(string editor_name, string view_bar_set)"},
			{ "trigger": "SetEnvironmentVariable", "contents": "SetEnvironmentVariable(string variable, string value)"},
			{ "trigger": "SetFieldDecimals", "contents": "SetFieldDecimals(string field_spec, integer new_decimals)"},
			{ "trigger": "SetFieldFormat", "contents": "SetFieldFormat(string field_spec, string field_format)"},
			{ "trigger": "SetFieldProtection", "contents": "SetFieldProtection(string field_spec, boolean protection_flag)"},
			{ "trigger": "SetFieldWidth", "contents": "SetFieldWidth(string field_spec, integer new_width)"},
			{ "trigger": "SetFileAttributes", "contents": "SetFileAttributes(string path, array options)"},
			{ "trigger": "SetFillColor", "contents": "SetFillColor(string lyr_set_name, color fill_color)"},
			{ "trigger": "SetFillStyle", "contents": "SetFillStyle(string lyr_set_name, fillstyle fill_style)"},
			{ "trigger": "SetFillStyleTransparency", "contents": "fillstyle = SetFillStyleTransparency(fillstyle style, boolean  transparency_flag)"},
			{ "trigger": "SetHatch", "contents": "SetHatch(string lyr_set_name, boolean show, double distance,  integer big_freq, integer label_freq, color color, string font)"},
			{ "trigger": "SetHelpFile", "contents": "SetHelpFile (string pathname)"},
			{ "trigger": "SetIcon", "contents": "SetIcon(string lyr_set_name, string icon_type, string name,  real size_or_index)"},
			{ "trigger": "SetIconColor", "contents": "SetIconColor(string lyr_set_name, color icon_color)"},
			{ "trigger": "SetIconSize", "contents": "SetIconSize(string lyr_set_name, real point_size)"},
			{ "trigger": "SetInvert", "contents": "n = SetInvert(string set_name, string input_set)"},
			{ "trigger": "SetItem", "contents": "SetItem(string item_name)"},
			{ "trigger": "SetItemSelection", "contents": "SetItemSelection(string item_name, integer start, integer  end)"},
			{ "trigger": "SetLabelOptions", "contents": "SetLabelOptions(string lyr_set_name, array options)"},
			{ "trigger": "SetLabels", "contents": "SetLabels(string lyr_set_name, string label_expr, array  options)"},
			{ "trigger": "SetLayer", "contents": "SetLayer(string layer_name)"},
			{ "trigger": "SetLayerPosition", "contents": "SetLayerPosition(string map_name, string layer_name, integer  new_position)"},
			{ "trigger": "SetLayerScale", "contents": "SetLayerScale(string layer_name, real min_scale, real max_scale)"},
			{ "trigger": "SetLayerSetsLabel", "contents": "SetLayerSetsLabel(string layer_name, string sets_label,  string flag)"},
			{ "trigger": "SetLayerVisibility", "contents": "SetLayerVisibility(string map_bar_layer, string visibility)"},
			{ "trigger": "SetLayoutOptions", "contents": "SetLayoutOptions(string layout_name, array options)"},
			{ "trigger": "SetLayoutPages", "contents": "SetLayoutPages(string layout_name, integer width, integer  height)"},
			{ "trigger": "SetLayoutPrevious", "contents": "SetLayoutPrevious(string layout_name)"},
			{ "trigger": "SetLayoutPrintSettings", "contents": "SetLayoutPrintSettings(string orientation, int n_copies)"},
			{ "trigger": "SetLayoutResizeItems", "contents": "SetLayoutResizeItems(string flag)"},
			{ "trigger": "SetLayoutScale", "contents": "SetLayoutScale(string layout_name, real ratio)"},
			{ "trigger": "SetLegendDisplayStatus", "contents": "SetLegendDisplayStatus(string set_or_theme_name, boolean  display_flag)"},
			{ "trigger": "SetLegendItemPosition", "contents": "SetLegendItemPosition(string map_name, integer old_position,  integer new_position)"},
			{ "trigger": "SetLegendOptions", "contents": "SetLegendOptions (string map_name, array options)"},
			{ "trigger": "SetLegendSettings", "contents": "SetLegendSettings (string map_name, array settings)"},
			{ "trigger": "SetLineColor", "contents": "SetLineColor(string lyr_set_name, color line_color)"},
			{ "trigger": "SetLineStyle", "contents": "SetLineStyle(string lyr_set_name, linestyle line_style)"},
			{ "trigger": "SetLineWidth", "contents": "SetLineStyle(string lyr_set_name, real line_width)"},
			{ "trigger": "SetLinkDirections", "contents": "SetLinkDirections(string layer_set, string direction)"},
			{ "trigger": "SetLogFileName", "contents": "SetLogFileName(string filename)"},
			{ "trigger": "SetLogMessageLimit", "contents": "SetLogMessageLimit(int limit)"},
			{ "trigger": "SetManualLabels", "contents": "SetManualLabels(string lyr_name, string label_expr, array  options)"},
			{ "trigger": "SetMap", "contents": "SetMap(string map_name)"},
			{ "trigger": "SetMapBackground", "contents": "SetMapBackground(string map_name, color back_color, fillstyle  back_fill)"},
			{ "trigger": "SetMapDefaultScope", "contents": "SetMapDefaultScope(string map_name, scope new_default_scope)"},
			{ "trigger": "SetMapFile", "contents": "SetMapFile(string map_name, string file_name)"},
			{ "trigger": "SetMapLabelOptions", "contents": "SetMapLabelOptions(string map_name, array options)"},
			{ "trigger": "SetMapNetworkFileName", "contents": "SetMapNetworkFileName(string map_name, string network_filename)"},
			{ "trigger": "SetMapOptions", "contents": "SetMapOptions(string map_name, array options)"},
			{ "trigger": "SetMapPrevious", "contents": "SetMapPrevious(string map_name)"},
			{ "trigger": "SetMapProjection", "contents": "SetMapProjection(string map_name, string proj_name, array  parameters)"},
			{ "trigger": "SetMapRedraw", "contents": "SetMapRedraw(string map_name, boolean redraw_flag)"},
			{ "trigger": "SetMapSaveFlag", "contents": "SetMapSaveFlag(string map_name, boolean new_flag_value)"},
			{ "trigger": "SetMapScope", "contents": "SetMapScope(string map_name, scope scp)"},
			{ "trigger": "SetMapTitle", "contents": "SetMapTitle(string map_name, string desc)"},
			{ "trigger": "SetMapUnits", "contents": "SetMapUnits(string unit_name)"},
			{ "trigger": "SetMatrix", "contents": "SetMatrix(matrix m)"},
			{ "trigger": "SetMatrixCore", "contents": "SetMatrixCore(matrix m, string core_name)"},
			{ "trigger": "SetMatrixCoreName", "contents": "SetMatrixCoreName(matrix m, string old_name, string new_name)"},
			{ "trigger": "SetMatrixCoreNames", "contents": "SetMatrixCoreNames(matrix m, array new_core_names)"},
			{ "trigger": "SetMatrixEditorColumnWidth", "contents": "SetMatrixEditorColumnWidth(string editor_name, array widths)"},
			{ "trigger": "SetMatrixEditorCurrency", "contents": "SetMatrixEditorCurrency(string editor_name, matcurrency  currency)"},
			{ "trigger": "SetMatrixEditorFormat", "contents": "format = SetMatrixEditorFormat(string editor_name, string  format)"},
			{ "trigger": "SetMatrixEditorLabels", "contents": "SetMatrixEditorLabels(string editor_name, array row_labels,  array column_labels)"},
			{ "trigger": "SetMatrixEditorSortOrder", "contents": "SetMatrixEditorSortOrder(string editor_name, array row_sort_spec,  array column_sort_spec, array options)"},
			{ "trigger": "SetMatrixIndex", "contents": "SetMatrixIndex(matrix m, string row_index_name, string  column_index_name)"},
			{ "trigger": "SetMatrixIndexName", "contents": "SetMatrixIndexName(matrix m, string old_name, string new_name)"},
			{ "trigger": "SetMatrixIndexNames", "contents": "SetMatrixIndexNames(matrix m, array new_index_names)"},
			{ "trigger": "SetMatrixValue", "contents": "SetMatrixValue(matcurrency currency, string row_ID, string  column_ID, real value)"},
			{ "trigger": "SetMatrixValues", "contents": "SetMatrixValues(matcurrency currency, array rows, array  columns, array operation, array options)"},
			{ "trigger": "SetMatrixVector", "contents": "SetMatrixVector(matcurrency currency, vector v, array option)"},
			{ "trigger": "SetMRUFiles", "contents": "SetMRUFiles(array files, string macro_name)"},
			{ "trigger": "SetNetworkInformationItem", "contents": "SetNetworkInformation(network net, string label, array  val)"},
			{ "trigger": "SetOffset", "contents": "SetOffset(string lyr_set_name, string offset_type, double  offset)"},
			{ "trigger": "SetOR", "contents": "n = SetOR(string set_name, array input_sets)"},
			{ "trigger": "SetPaperUnits", "contents": "SetPaperUnits(string unit_name)"},
			{ "trigger": "SetPrintMargins", "contents": "SetPrintMargins(array margin_settings)"},
			{ "trigger": "SetRandomSeed", "contents": "SetRandomSeed(integer seed_value)"},
			{ "trigger": "SetRecord", "contents": "SetRecord(string view_name, string record_handle)"},
			{ "trigger": "SetRecordsValues", "contents": "SetRecordsValues(string view_set_name, array region, string  method, array params, array options)"},
			{ "trigger": "SetRecordValues", "contents": "SetRecordValues(string view_name, string record_handle,  array fieldnames_values)"},
			{ "trigger": "SetReferenceInfo", "contents": "SetReferenceInfo(boolean ref_info_flag)"},
			{ "trigger": "SetReportFileEncoding", "contents": "SetReportFileEncoding(string encoding)"},
			{ "trigger": "SetReportFileName", "contents": "SetReportFileName(string filename)"},
			{ "trigger": "SetRouteMilepost", "contents": "SetRouteMilepost(string rs_layer, string name, coord c,  integer pass_count double mp)"},
			{ "trigger": "SetRouteSystemChanneling", "contents": "SetRouteSystemChanneling(string rs_layer, string type,  string ch_val_field)"},
			{ "trigger": "SetRowOrder", "contents": "SetRowOrder(string editor_name, array sort_sequence)"},
			{ "trigger": "SetSampleText", "contents": "sample = SetSampleText(sample_object input_sample, string  text)"},
			{ "trigger": "SetScale", "contents": "SetScale(string map_name, real scale_value)"},
			{ "trigger": "SetSearchPath", "contents": "SetSearchPath(string path)"},
			{ "trigger": "SetSelectAutoRedraw", "contents": "SetSelectAutoRedraw(boolean redraw)"},
			{ "trigger": "SetSelectDisplay", "contents": "SetSelectDisplay(boolean display_flag)"},
			{ "trigger": "SetSelectInclusion", "contents": "SetSelectInclusion(string inclusion)"},
			{ "trigger": "SetSetPosition", "contents": "SetSetPosition(string set_name, integer position)"},
			{ "trigger": "SetSetScale", "contents": "SetSetScale(string set, double min_scale, double max_scale)"},
			{ "trigger": "SetStatus", "contents": "SetStatus(integer section, string contents, string disabled)"},
			{ "trigger": "SetStatusBar", "contents": "SetStatusBar(array sizes)"},
			{ "trigger": "SetThemeClassLabel", "contents": "SetThemeClassLabel(string theme_name, string label, integer  index)"},
			{ "trigger": "SetThemeClassLabels", "contents": "SetThemeClassLabels(string theme_name, array labels)"},
			{ "trigger": "SetThemeFillColors", "contents": "SetThemeFillColors(string theme_name, array colors)"},
			{ "trigger": "SetThemeFillStyles", "contents": "SetThemeFillStyles(string theme_name, array fillstyles)"},
			{ "trigger": "SetThemeIconColors", "contents": "SetThemeIconColors(string theme_name, array colors)"},
			{ "trigger": "SetThemeIcons", "contents": "SetThemeIcons(string theme_name, array icons)"},
			{ "trigger": "SetThemeLineColors", "contents": "SetThemeLineColors(string theme_name, array colors)"},
			{ "trigger": "SetThemeLineStyles", "contents": "SetThemeLineStyles(string theme_name, array linestyles)"},
			{ "trigger": "SetThemeLineWidths", "contents": "SetThemeLineWidths(string theme_name, array linewidths)"},
			{ "trigger": "SetThemeOptions", "contents": "SetThemeOptions(string theme_name, array options)"},
			{ "trigger": "SetTool", "contents": "SetTool(string item_name)"},
			{ "trigger": "SetView", "contents": "SetView(string view_name)"},
			{ "trigger": "SetViewReadOnly", "contents": "SetViewReadOnly(string view_name, boolean read_only_flag)"},
			{ "trigger": "SetVisibleRectangle", "contents": "SetVisibleRectangle(string layout_name, real x, real y,  real w, real h)"},
			{ "trigger": "SetWindow", "contents": "SetWindow(string window_name)"},
			{ "trigger": "SetWindowData", "contents": "SetWindowData(string window_name, array data)"},
			{ "trigger": "SetWindowPosition", "contents": "SetWindowPosition(string window_name, integer x_pos, integer  y_pos)"},
			{ "trigger": "SetWindowSize", "contents": "SetWindowSize(string window_name, integer width, integer  height)"},
			{ "trigger": "SetWindowSizePixels", "contents": "SetWindowSizePixels(string window_name, integer width,  integer height)"},
			{ "trigger": "SetXOR", "contents": "n = SetXOR(string set_name, array input_sets)"},
			{ "trigger": "ShiftLeft", "contents": "int = ShiftLeft(integer int1, integer shift)"},
			{ "trigger": "ShiftRight", "contents": "int = ShiftRight(integer int1, integer shift)"},
			{ "trigger": "ShortestPath", "contents": "short_path = ShortestPath(network net, array point_ids,  integer var_index, array options)"},
			{ "trigger": "ShortestPathTree", "contents": "short_path = ShortestPathTree(network net_handle, integer  from_id, integer var_index)"},
			{ "trigger": "ShortestTurnPath", "contents": "short_path = ShortestTurnPath(network net_handle, integer  from_id, integer to_id, integer var_index, array options)"},
			{ "trigger": "ShortestTurnPathTree", "contents": "short_path = ShortestTurnPathTree(network net_handle, integer  from_id, integer var_index, array options)"},
			{ "trigger": "ShortestXferPath", "contents": "short_path = ShortestXferPath(network net_handle, integer  from_id, integer to_id, integer var_index, integer LineIDIndex, integer  PenaltyIndex, array options)"},
			{ "trigger": "ShortestXferPathTree", "contents": "short_path = ShortestXferPathTree(network net_handle, integer  from_id, integer var_index, integer LineIDIndex, integer PenaltyIndex,  array options)"},
			{ "trigger": "ShowArray", "contents": "ShowArray(array arr)"},
			{ "trigger": "ShowBitmap", "contents": "action = ShowBitmap(string filename, array options)"},
			{ "trigger": "ShowDbox", "contents": "ShowDbox(string dbox_name)"},
			{ "trigger": "ShowItem", "contents": "ShowItem(string item_name)"},
			{ "trigger": "ShowLegend", "contents": "ShowLegend (string map_name)"},
			{ "trigger": "ShowMessage", "contents": "ShowMessage(string message)"},
			{ "trigger": "ShowSnapshot", "contents": "ShowSnapshot(string map_name, string snapshot_name)"},
			{ "trigger": "ShowTheme", "contents": "ShowTheme(string set_name, string theme_name)"},
			{ "trigger": "Sign", "contents": "sgn = Sign(real value)"},
			{ "trigger": "Sin", "contents": "value = Sin(real angle_value)"},
			{ "trigger": "Sinh", "contents": "value = Sinh(real angle_value)"},
			{ "trigger": "Skew", "contents": "skew_value = skew(array input_data)"},
			{ "trigger": "Sleep", "contents": "Sleep(integer interval)"},
			{ "trigger": "SnapStopsToRouteSystem", "contents": "SnapStopsToRouteSystem(string rs_layer)"},
			{ "trigger": "SnapStopToLinks", "contents": "snapped = SnapStopToLinks(string rs_layer, array links,  coord c)"},
			{ "trigger": "SnapStopToRoute", "contents": "snapped = SnapStopToRoute(string rs_layer, string name,  coord c)"},
			{ "trigger": "SortArray", "contents": "new_array = SortArray(array my_array [, array options])"},
			{ "trigger": "SortSet", "contents": "SortSet(string set_name, string field_names)"},
			{ "trigger": "SortVector", "contents": "sort_vec = SortVector(vector vec [, array options])"},
			{ "trigger": "SortVectors", "contents": "sort_array = SortVectors(array vecs [, array options])"},
			{ "trigger": "SplitLink", "contents": "new_ids = SplitLink(integer old_id, coordinate split_point,  array options)"},
			{ "trigger": "SplitNode", "contents": "node_ids = SplitNode(integer ID, array options)"},
			{ "trigger": "SplitPath", "contents": "parts = SplitPath(string path)"},
			{ "trigger": "SplitString", "contents": "pieces = SplitString(string s)"},
			{ "trigger": "Sqrt", "contents": "sqrt_value = Sqrt(real input_value)"},
			{ "trigger": "SqueezeDatabase", "contents": "SqueezeDatabase(string geofile_name, string temp_path)"},
			{ "trigger": "Standardize", "contents": "std = Standardize(string input, string rules_file)"},
			{ "trigger": "StandardizeView", "contents": "StandardizeView(string view_set, array address_fields,  string rules_file, string ID_field, string output_file_type, string output_file,  options)"},
			{ "trigger": "StartGPS", "contents": "StartGPS(string device, array options)"},
			{ "trigger": "Std", "contents": "std_dev = Std(array input_values, integer flag)"},
			{ "trigger": "String", "contents": "str_value = String(number value)"},
			{ "trigger": "StringLength", "contents": "n = StringLength(string input_string)"},
			{ "trigger": "StringToInt", "contents": "int_value = StringToInt(string input_string)"},
			{ "trigger": "StringToReal", "contents": "real_value = StringToReal(string input_string)"},
			{ "trigger": "Subarray", "contents": "sub_array = Subarray(array my_array, integer start, integer  count)"},
			{ "trigger": "Substitute", "contents": "new_string = Substitute(string input_str, string find_str,  string repl_str, integer n)"},
			{ "trigger": "Substring", "contents": "sub_string = Substring(string input_string, integer start,  integer length)"},
			{ "trigger": "Sum", "contents": "total = Sum(array input_array)"},
			{ "trigger": "TableHasTranslation", "contents": "rslt = TableHasTranslation(viewname)"},
			{ "trigger": "TagLayer", "contents": "TagLayer(string mode, string dest_layer_set, string dest_field_name,  string source_layer, string source_field_name)"},
			{ "trigger": "TagRouteStopsWithNode", "contents": "n = TagRouteStopsWithNode(string rs_layer_name, string  route_set, string stop_field, double threshold)"},
			{ "trigger": "Tan", "contents": "value = Tan(real angle_value)"},
			{ "trigger": "Tanh", "contents": "value = Tanh(real angle_value)"},
			{ "trigger": "TestTheme", "contents": "info = TestTheme(string field_spec, string method, integer  num_classes, array options)"},
			{ "trigger": "Throw", "contents": "Throw(string text)"},
			{ "trigger": "TigerVersion", "contents": "TigerVersion(string filename)"},
			{ "trigger": "TileWindows", "contents": "TileWindows([array options])"},
			{ "trigger": "TimeWindowTSP", "contents": "tsp_arr = TimeWindowTSP(network net, array stop_data, integer  var_index, array options)"},
			{ "trigger": "TINElevations", "contents": "minmax = TINElevations(tin t)"},
			{ "trigger": "TINScope", "contents": "scope = TINScope(tin t)"},
			{ "trigger": "TransposeMatrix", "contents": "new_matrix = TransposeMatrix(matrix m, array options)"},
			{ "trigger": "TSP", "contents": "tsp_arr = TSP(network net, array stop_IDs, integer var_index)"},
			{ "trigger": "TSPFromSet", "contents": "tsp_arr = TSPFromSet(network net, integer var_index, string  node_set, array options)"},
			{ "trigger": "TwoWayTable", "contents": "new_matrix = TwoWayTable(string mat_name, string view_set,  array tab_spec1, array tab_spec2, array mat_options)"},
			{ "trigger": "TypeOf", "contents": "type = TypeOf(variable var)"},
			{ "trigger": "UnRegisterImageFile", "contents": "UnRegisterImageFile(string file_name)"},
			{ "trigger": "UnselectRecord", "contents": "n_selected = UnselectRecord(string set_name)"},
			{ "trigger": "UpdateDbox", "contents": "UpdateDbox(string tbox_name)"},
			{ "trigger": "UpdateMatrixFromView", "contents": "UpdateMatrixFromView(matrix m, string view_set, string  row_ID_fld, string column_ID_fld, string core_fld, array cols, string  method, array options)"},
			{ "trigger": "UpdateNetworkCost", "contents": "UpdateNetworkCost(network net_handle, string field_AB,  string field_BA, integer var_index)"},
			{ "trigger": "UpdateProgressBar", "contents": "interrupted = UpdateProgressBar(string activity, integer  percentage)"},
			{ "trigger": "Upper", "contents": "new_string = Upper(string input_string)"},
			{ "trigger": "Value", "contents": "real_value = Value(string input_string)"},
			{ "trigger": "Var", "contents": "var_value = Var(array input_data, integer sample_flag)"},
			{ "trigger": "Vector", "contents": "Vector (int length, string type, array options)"},
			{ "trigger": "VectorStatistic", "contents": "stat = VectorStatistic(vector v, string statistic, array  options)"},
			{ "trigger": "VectorToArray", "contents": "arr = VectorToArray(vector vec)"},
			{ "trigger": "VerifyExpression", "contents": "info_array = VerifyExpression(string view_name, string  expression)"},
			{ "trigger": "VerifyIndex", "contents": "include_flag = VerifyIndex(matrix m, string index_name,  string view_set, string column_name)"},
			{ "trigger": "VerifyQuery", "contents": "VerifyQuery(string query)"},
			{ "trigger": "VerifyRouteSystem", "contents": "VerifyRouteSystem(string rs_path, string verification_level)"},
			{ "trigger": "WeightedMatrixSum", "contents": "WeightedMatrixSum(matcurrency currency, array cores, array  factors, array row_ids, array column_ids, array options)"},
			{ "trigger": "Word", "contents": "w = Word(string s, integer position)"},
			{ "trigger": "WriteArray", "contents": "WriteArray(file file_ptr, array a)"},
			{ "trigger": "WriteArraySeparated", "contents": "WriteArraySeparated(file file_ptr, array a, string delim,  string quote)"},
			{ "trigger": "WriteLine", "contents": "WriteLine(file f, string line)"},
			{ "trigger": "WriteNetwork", "contents": "WriteNetwork(network net_handle, string file_name, string  label)"},
			{ "trigger": "ZeroToNull", "contents": "new_value = ZeroToNull(real old_value, real epsilon)"},
			{ "trigger": "ZoomAndCenterMap", "contents": "ZoomAndCenterMap(string map_name, real fraction, coordinate  center)"},
			{ "trigger": "ZoomLayout", "contents": "ZoomLayout(string layout_name, real factor)"},
			{ "trigger": "ZoomMap", "contents": "ZoomMap(string map_name, real fraction)"}

		]
}